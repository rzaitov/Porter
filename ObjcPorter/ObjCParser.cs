//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ObjC.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class ObjCParser : Parser {
	public const int
		AUTORELEASEPOOL=1, CATCH=2, CLASS=3, DYNAMIC=4, ENCODE=5, END=6, FINALLY=7, 
		IMPLEMENTATION=8, INTERFACE=9, PACKAGE=10, PROTOCOL=11, OPTIONAL=12, PRIVATE=13, 
		PROPERTY=14, PROTECTED=15, PUBLIC=16, SELECTOR=17, SYNCHRONIZED=18, SYNTHESIZE=19, 
		THROW=20, TRY=21, SUPER=22, SELF=23, ABSTRACT=24, AUTO=25, BOOLEAN=26, 
		BREAK=27, BYCOPY=28, BYREF=29, CASE=30, CHAR=31, CONST=32, CONTINUE=33, 
		DEFAULT=34, DO=35, DOUBLE=36, ELSE=37, ENUM=38, EXTERN=39, FLOAT=40, FOR=41, 
		ID=42, IF=43, IN=44, INOUT=45, GOTO=46, INT=47, LONG=48, ONEWAY=49, OUT=50, 
		REGISTER=51, RETURN=52, SHORT=53, SIGNED=54, SIZEOF=55, STATIC=56, STRUCT=57, 
		SWITCH=58, TYPEDEF=59, UNION=60, UNSIGNED=61, VOID=62, VOLATILE=63, WHILE=64, 
		NS_OPTIONS=65, NS_ENUM=66, WWEAK=67, WUNSAFE_UNRETAINED=68, LPAREN=69, 
		RPAREN=70, LBRACE=71, RBRACE=72, LBRACK=73, RBRACK=74, SEMI=75, COMMA=76, 
		DOT=77, STRUCTACCESS=78, AT=79, ASSIGN=80, GT=81, LT=82, BANG=83, TILDE=84, 
		QUESTION=85, COLON=86, EQUAL=87, LE=88, GE=89, NOTEQUAL=90, AND=91, OR=92, 
		INC=93, DEC=94, ADD=95, SUB=96, MUL=97, DIV=98, BITAND=99, BITOR=100, 
		CARET=101, MOD=102, SHIFT_R=103, SHIFT_L=104, ADD_ASSIGN=105, SUB_ASSIGN=106, 
		MUL_ASSIGN=107, DIV_ASSIGN=108, AND_ASSIGN=109, OR_ASSIGN=110, XOR_ASSIGN=111, 
		MOD_ASSIGN=112, LSHIFT_ASSIGN=113, RSHIFT_ASSIGN=114, ELIPSIS=115, ASSIGNPA=116, 
		GETTER=117, NONATOMIC=118, SETTER=119, STRONG=120, RETAIN=121, READONLY=122, 
		READWRITE=123, WEAK=124, IDENTIFIER=125, CHARACTER_LITERAL=126, STRING_LITERAL=127, 
		HEX_LITERAL=128, DECIMAL_LITERAL=129, OCTAL_LITERAL=130, FLOATING_POINT_LITERAL=131, 
		IMPORT=132, OBJCIMPORT=133, INCLUDE=134, PRAGMA=135, WS=136, COMMENT=137, 
		LINE_COMMENT=138, HDEFINE=139, HIF=140, HELSE=141, HUNDEF=142, HIFNDEF=143, 
		HENDIF=144;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'@autoreleasepool'", "'@catch'", "'@class'", "'@dynamic'", 
		"'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", 
		"'@package'", "'@protocol'", "'@optional'", "'@private'", "'@property'", 
		"'@protected'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", 
		"'@throw'", "'@try'", "'super'", "'self'", "'abstract'", "'auto'", "'boolean'", 
		"'break'", "'bycopy'", "'byref'", "'case'", "'char'", "'const'", "'continue'", 
		"'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", 
		"'for'", "'id'", "'if'", "'in'", "'inout'", "'goto'", "'int'", "'long'", 
		"'oneway'", "'out'", "'register'", "'return'", "'short'", "'signed'", 
		"'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
		"'unsigned'", "'void'", "'volatile'", "'while'", "'NS_OPTIONS'", "'NS_ENUM'", 
		"'__weak'", "'__unsafe_unretained'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "','", "'.'", "'->'", "'@'", "'='", "'>'", "'<'", "'!'", 
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", 
		"'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'>>'", 
		"'<<'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
		"'<<='", "'>>='", "'...'", "'assign'", "'getter'", "'nonatomic'", "'setter'", 
		"'strong'", "'retain'", "'readonly'", "'readwrite'", "'weak'", "IDENTIFIER", 
		"CHARACTER_LITERAL", "STRING_LITERAL", "HEX_LITERAL", "DECIMAL_LITERAL", 
		"OCTAL_LITERAL", "FLOATING_POINT_LITERAL", "IMPORT", "OBJCIMPORT", "INCLUDE", 
		"PRAGMA", "WS", "COMMENT", "LINE_COMMENT", "HDEFINE", "HIF", "HELSE", 
		"HUNDEF", "HIFNDEF", "HENDIF"
	};
	public const int
		RULE_translation_unit = 0, RULE_external_declaration = 1, RULE_preprocessor_declaration = 2, 
		RULE_class_interface = 3, RULE_category_interface = 4, RULE_class_implementation = 5, 
		RULE_category_implementation = 6, RULE_protocol_declaration = 7, RULE_protocol_declaration_list = 8, 
		RULE_class_declaration_list = 9, RULE_class_list = 10, RULE_protocol_reference_list = 11, 
		RULE_protocol_list = 12, RULE_property_declaration = 13, RULE_property_attributes_declaration = 14, 
		RULE_property_attributes_list = 15, RULE_property_attribute = 16, RULE_class_name = 17, 
		RULE_superclass_name = 18, RULE_category_name = 19, RULE_protocol_name = 20, 
		RULE_instance_variables = 21, RULE_visibility_specification = 22, RULE_interface_declaration_list = 23, 
		RULE_class_method_declaration = 24, RULE_instance_method_declaration = 25, 
		RULE_method_declaration = 26, RULE_implementation_definition_list = 27, 
		RULE_class_method_definition = 28, RULE_instance_method_definition = 29, 
		RULE_method_definition = 30, RULE_method_selector = 31, RULE_keyword_declarator = 32, 
		RULE_selector = 33, RULE_method_type = 34, RULE_property_implementation = 35, 
		RULE_property_synthesize_list = 36, RULE_property_synthesize_item = 37, 
		RULE_block_type = 38, RULE_type_specifier = 39, RULE_type_qualifier = 40, 
		RULE_protocol_qualifier = 41, RULE_primary_expression = 42, RULE_dictionary_pair = 43, 
		RULE_dictionary_expression = 44, RULE_array_expression = 45, RULE_box_expression = 46, 
		RULE_block_parameters = 47, RULE_block_expression = 48, RULE_message_expression = 49, 
		RULE_receiver = 50, RULE_message_selector = 51, RULE_keyword_argument = 52, 
		RULE_selector_expression = 53, RULE_selector_name = 54, RULE_protocol_expression = 55, 
		RULE_encode_expression = 56, RULE_type_variable_declarator = 57, RULE_try_statement = 58, 
		RULE_catch_statement = 59, RULE_finally_statement = 60, RULE_throw_statement = 61, 
		RULE_try_block = 62, RULE_synchronized_statement = 63, RULE_autorelease_statement = 64, 
		RULE_function_definition = 65, RULE_declaration = 66, RULE_declaration_specifiers = 67, 
		RULE_arc_behaviour_specifier = 68, RULE_storage_class_specifier = 69, 
		RULE_init_declarator_list = 70, RULE_init_declarator = 71, RULE_struct_or_union_specifier = 72, 
		RULE_struct_declaration = 73, RULE_specifier_qualifier_list = 74, RULE_struct_declarator_list = 75, 
		RULE_struct_declarator = 76, RULE_enum_specifier = 77, RULE_enumerator_list = 78, 
		RULE_enumerator = 79, RULE_pointer = 80, RULE_declarator = 81, RULE_direct_declarator = 82, 
		RULE_declarator_suffix = 83, RULE_parameter_list = 84, RULE_parameter_declaration = 85, 
		RULE_initializer = 86, RULE_type_name = 87, RULE_abstract_declarator = 88, 
		RULE_abstract_declarator_suffix = 89, RULE_parameter_declaration_list = 90, 
		RULE_statement_list = 91, RULE_statement = 92, RULE_labeled_statement = 93, 
		RULE_compound_statement = 94, RULE_selection_statement = 95, RULE_for_in_statement = 96, 
		RULE_for_statement = 97, RULE_while_statement = 98, RULE_do_statement = 99, 
		RULE_iteration_statement = 100, RULE_jump_statement = 101, RULE_expression = 102, 
		RULE_assignment_expression = 103, RULE_assignment_operator = 104, RULE_conditional_expression = 105, 
		RULE_constant_expression = 106, RULE_logical_or_expression = 107, RULE_logical_and_expression = 108, 
		RULE_inclusive_or_expression = 109, RULE_exclusive_or_expression = 110, 
		RULE_and_expression = 111, RULE_equality_expression = 112, RULE_relational_expression = 113, 
		RULE_shift_expression = 114, RULE_additive_expression = 115, RULE_multiplicative_expression = 116, 
		RULE_cast_expression = 117, RULE_unary_expression = 118, RULE_unary_operator = 119, 
		RULE_postfix_expression = 120, RULE_argument_expression_list = 121, RULE_identifier = 122, 
		RULE_constant = 123;
	public static readonly string[] ruleNames = {
		"translation_unit", "external_declaration", "preprocessor_declaration", 
		"class_interface", "category_interface", "class_implementation", "category_implementation", 
		"protocol_declaration", "protocol_declaration_list", "class_declaration_list", 
		"class_list", "protocol_reference_list", "protocol_list", "property_declaration", 
		"property_attributes_declaration", "property_attributes_list", "property_attribute", 
		"class_name", "superclass_name", "category_name", "protocol_name", "instance_variables", 
		"visibility_specification", "interface_declaration_list", "class_method_declaration", 
		"instance_method_declaration", "method_declaration", "implementation_definition_list", 
		"class_method_definition", "instance_method_definition", "method_definition", 
		"method_selector", "keyword_declarator", "selector", "method_type", "property_implementation", 
		"property_synthesize_list", "property_synthesize_item", "block_type", 
		"type_specifier", "type_qualifier", "protocol_qualifier", "primary_expression", 
		"dictionary_pair", "dictionary_expression", "array_expression", "box_expression", 
		"block_parameters", "block_expression", "message_expression", "receiver", 
		"message_selector", "keyword_argument", "selector_expression", "selector_name", 
		"protocol_expression", "encode_expression", "type_variable_declarator", 
		"try_statement", "catch_statement", "finally_statement", "throw_statement", 
		"try_block", "synchronized_statement", "autorelease_statement", "function_definition", 
		"declaration", "declaration_specifiers", "arc_behaviour_specifier", "storage_class_specifier", 
		"init_declarator_list", "init_declarator", "struct_or_union_specifier", 
		"struct_declaration", "specifier_qualifier_list", "struct_declarator_list", 
		"struct_declarator", "enum_specifier", "enumerator_list", "enumerator", 
		"pointer", "declarator", "direct_declarator", "declarator_suffix", "parameter_list", 
		"parameter_declaration", "initializer", "type_name", "abstract_declarator", 
		"abstract_declarator_suffix", "parameter_declaration_list", "statement_list", 
		"statement", "labeled_statement", "compound_statement", "selection_statement", 
		"for_in_statement", "for_statement", "while_statement", "do_statement", 
		"iteration_statement", "jump_statement", "expression", "assignment_expression", 
		"assignment_operator", "conditional_expression", "constant_expression", 
		"logical_or_expression", "logical_and_expression", "inclusive_or_expression", 
		"exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"cast_expression", "unary_expression", "unary_operator", "postfix_expression", 
		"argument_expression_list", "identifier", "constant"
	};

	public override string GrammarFileName { get { return "ObjC.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ObjCParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Translation_unitContext : ParserRuleContext {
		public External_declarationContext external_declaration(int i) {
			return GetRuleContext<External_declarationContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(ObjCParser.Eof, 0); }
		public IReadOnlyList<External_declarationContext> external_declaration() {
			return GetRuleContexts<External_declarationContext>();
		}
		public Translation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterTranslation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitTranslation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Translation_unitContext translation_unit() {
		Translation_unitContext _localctx = new Translation_unitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_translation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 248; external_declaration();
				}
				}
				State = 251;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << IMPLEMENTATION) | (1L << INTERFACE) | (1L << PROTOCOL) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (LPAREN - 65)) | (1L << (MUL - 65)) | (1L << (IDENTIFIER - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (IMPORT - 132)) | (1L << (INCLUDE - 132)) | (1L << (COMMENT - 132)) | (1L << (LINE_COMMENT - 132)))) != 0) );
			State = 253; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_declarationContext : ParserRuleContext {
		public Class_declaration_listContext class_declaration_list() {
			return GetRuleContext<Class_declaration_listContext>(0);
		}
		public Category_interfaceContext category_interface() {
			return GetRuleContext<Category_interfaceContext>(0);
		}
		public Protocol_declaration_listContext protocol_declaration_list() {
			return GetRuleContext<Protocol_declaration_listContext>(0);
		}
		public Category_implementationContext category_implementation() {
			return GetRuleContext<Category_implementationContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode LINE_COMMENT() { return GetToken(ObjCParser.LINE_COMMENT, 0); }
		public Class_implementationContext class_implementation() {
			return GetRuleContext<Class_implementationContext>(0);
		}
		public Preprocessor_declarationContext preprocessor_declaration() {
			return GetRuleContext<Preprocessor_declarationContext>(0);
		}
		public Protocol_declarationContext protocol_declaration() {
			return GetRuleContext<Protocol_declarationContext>(0);
		}
		public Class_interfaceContext class_interface() {
			return GetRuleContext<Class_interfaceContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(ObjCParser.COMMENT, 0); }
		public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public External_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterExternal_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitExternal_declaration(this);
		}
	}

	[RuleVersion(0)]
	public External_declarationContext external_declaration() {
		External_declarationContext _localctx = new External_declarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_external_declaration);
		try {
			State = 267;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; Match(COMMENT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(LINE_COMMENT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257; preprocessor_declaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; function_definition();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259; declaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 260; class_interface();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 261; class_implementation();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 262; category_interface();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 263; category_implementation();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 264; protocol_declaration();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 265; protocol_declaration_list();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 266; class_declaration_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_declarationContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(ObjCParser.INCLUDE, 0); }
		public ITerminalNode IMPORT() { return GetToken(ObjCParser.IMPORT, 0); }
		public Preprocessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterPreprocessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitPreprocessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_declarationContext preprocessor_declaration() {
		Preprocessor_declarationContext _localctx = new Preprocessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_preprocessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = _input.La(1);
			if ( !(_la==IMPORT || _la==INCLUDE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_interfaceContext : ParserRuleContext {
		public Superclass_nameContext superclass_name() {
			return GetRuleContext<Superclass_nameContext>(0);
		}
		public Protocol_reference_listContext protocol_reference_list() {
			return GetRuleContext<Protocol_reference_listContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Instance_variablesContext instance_variables() {
			return GetRuleContext<Instance_variablesContext>(0);
		}
		public Interface_declaration_listContext interface_declaration_list() {
			return GetRuleContext<Interface_declaration_listContext>(0);
		}
		public Class_interfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_interface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_interface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_interface(this);
		}
	}

	[RuleVersion(0)]
	public Class_interfaceContext class_interface() {
		Class_interfaceContext _localctx = new Class_interfaceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_class_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(INTERFACE);
			State = 272; class_name();
			State = 275;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 273; Match(COLON);
				State = 274; superclass_name();
				}
			}

			State = 278;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 277; protocol_reference_list();
				}
			}

			State = 281;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 280; instance_variables();
				}
			}

			State = 284;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROPERTY) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 283; interface_declaration_list();
				}
			}

			State = 286; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_interfaceContext : ParserRuleContext {
		public Protocol_reference_listContext protocol_reference_list() {
			return GetRuleContext<Protocol_reference_listContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Instance_variablesContext instance_variables() {
			return GetRuleContext<Instance_variablesContext>(0);
		}
		public Category_nameContext category_name() {
			return GetRuleContext<Category_nameContext>(0);
		}
		public Interface_declaration_listContext interface_declaration_list() {
			return GetRuleContext<Interface_declaration_listContext>(0);
		}
		public Category_interfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_interface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterCategory_interface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitCategory_interface(this);
		}
	}

	[RuleVersion(0)]
	public Category_interfaceContext category_interface() {
		Category_interfaceContext _localctx = new Category_interfaceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_category_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(INTERFACE);
			State = 289; class_name();
			State = 290; Match(LPAREN);
			State = 292;
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 291; category_name();
				}
			}

			State = 294; Match(RPAREN);
			State = 296;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 295; protocol_reference_list();
				}
			}

			State = 299;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 298; instance_variables();
				}
			}

			State = 302;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROPERTY) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 301; interface_declaration_list();
				}
			}

			State = 304; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_implementationContext : ParserRuleContext {
		public Superclass_nameContext superclass_name() {
			return GetRuleContext<Superclass_nameContext>(0);
		}
		public Implementation_definition_listContext implementation_definition_list() {
			return GetRuleContext<Implementation_definition_listContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Instance_variablesContext instance_variables() {
			return GetRuleContext<Instance_variablesContext>(0);
		}
		public Class_implementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_implementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_implementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_implementation(this);
		}
	}

	[RuleVersion(0)]
	public Class_implementationContext class_implementation() {
		Class_implementationContext _localctx = new Class_implementationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_class_implementation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(IMPLEMENTATION);
			{
			State = 307; class_name();
			State = 310;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 308; Match(COLON);
				State = 309; superclass_name();
				}
			}

			State = 313;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 312; instance_variables();
				}
			}

			State = 316;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DYNAMIC) | (1L << SYNTHESIZE) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (LPAREN - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (MUL - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 315; implementation_definition_list();
				}
			}

			}
			State = 318; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_implementationContext : ParserRuleContext {
		public Implementation_definition_listContext implementation_definition_list() {
			return GetRuleContext<Implementation_definition_listContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Category_nameContext category_name() {
			return GetRuleContext<Category_nameContext>(0);
		}
		public Category_implementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_implementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterCategory_implementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitCategory_implementation(this);
		}
	}

	[RuleVersion(0)]
	public Category_implementationContext category_implementation() {
		Category_implementationContext _localctx = new Category_implementationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_category_implementation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; Match(IMPLEMENTATION);
			{
			State = 321; class_name();
			State = 322; Match(LPAREN);
			State = 323; category_name();
			State = 324; Match(RPAREN);
			State = 326;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DYNAMIC) | (1L << SYNTHESIZE) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (LPAREN - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (MUL - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 325; implementation_definition_list();
				}
			}

			}
			State = 328; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_declarationContext : ParserRuleContext {
		public Protocol_reference_listContext protocol_reference_list() {
			return GetRuleContext<Protocol_reference_listContext>(0);
		}
		public Interface_declaration_listContext interface_declaration_list(int i) {
			return GetRuleContext<Interface_declaration_listContext>(i);
		}
		public Protocol_nameContext protocol_name() {
			return GetRuleContext<Protocol_nameContext>(0);
		}
		public IReadOnlyList<Interface_declaration_listContext> interface_declaration_list() {
			return GetRuleContexts<Interface_declaration_listContext>();
		}
		public Protocol_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_declarationContext protocol_declaration() {
		Protocol_declarationContext _localctx = new Protocol_declarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_protocol_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(PROTOCOL);
			{
			State = 331; protocol_name();
			State = 333;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 332; protocol_reference_list();
				}
			}

			State = 336;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 335; interface_declaration_list();
				}
				break;
			}
			State = 339;
			_la = _input.La(1);
			if (_la==OPTIONAL) {
				{
				State = 338; Match(OPTIONAL);
				}
			}

			State = 342;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PROPERTY) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 341; interface_declaration_list();
				}
			}

			}
			State = 344; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_declaration_listContext : ParserRuleContext {
		public Protocol_listContext protocol_list() {
			return GetRuleContext<Protocol_listContext>(0);
		}
		public Protocol_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_declaration_listContext protocol_declaration_list() {
		Protocol_declaration_listContext _localctx = new Protocol_declaration_listContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_protocol_declaration_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 346; Match(PROTOCOL);
			State = 347; protocol_list();
			State = 348; Match(SEMI);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declaration_listContext : ParserRuleContext {
		public Class_listContext class_list() {
			return GetRuleContext<Class_listContext>(0);
		}
		public Class_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Class_declaration_listContext class_declaration_list() {
		Class_declaration_listContext _localctx = new Class_declaration_listContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_class_declaration_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 350; Match(CLASS);
			State = 351; class_list();
			State = 352; Match(SEMI);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_listContext : ParserRuleContext {
		public Class_nameContext class_name(int i) {
			return GetRuleContext<Class_nameContext>(i);
		}
		public IReadOnlyList<Class_nameContext> class_name() {
			return GetRuleContexts<Class_nameContext>();
		}
		public Class_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_list(this);
		}
	}

	[RuleVersion(0)]
	public Class_listContext class_list() {
		Class_listContext _localctx = new Class_listContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_class_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; class_name();
			State = 359;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 355; Match(COMMA);
				State = 356; class_name();
				}
				}
				State = 361;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_reference_listContext : ParserRuleContext {
		public Protocol_listContext protocol_list() {
			return GetRuleContext<Protocol_listContext>(0);
		}
		public Protocol_reference_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_reference_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_reference_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_reference_list(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_reference_listContext protocol_reference_list() {
		Protocol_reference_listContext _localctx = new Protocol_reference_listContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_protocol_reference_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 362; Match(LT);
			State = 363; protocol_list();
			State = 364; Match(GT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_listContext : ParserRuleContext {
		public Protocol_nameContext protocol_name(int i) {
			return GetRuleContext<Protocol_nameContext>(i);
		}
		public IReadOnlyList<Protocol_nameContext> protocol_name() {
			return GetRuleContexts<Protocol_nameContext>();
		}
		public Protocol_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_list(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_listContext protocol_list() {
		Protocol_listContext _localctx = new Protocol_listContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_protocol_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; protocol_name();
			State = 371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 367; Match(COMMA);
				State = 368; protocol_name();
				}
				}
				State = 373;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public Property_attributes_declarationContext property_attributes_declaration() {
			return GetRuleContext<Property_attributes_declarationContext>(0);
		}
		public Struct_declarationContext struct_declaration() {
			return GetRuleContext<Struct_declarationContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(PROPERTY);
			State = 376;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 375; property_attributes_declaration();
				}
			}

			State = 378; struct_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_attributes_declarationContext : ParserRuleContext {
		public Property_attributes_listContext property_attributes_list() {
			return GetRuleContext<Property_attributes_listContext>(0);
		}
		public Property_attributes_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_attributes_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_attributes_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_attributes_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Property_attributes_declarationContext property_attributes_declaration() {
		Property_attributes_declarationContext _localctx = new Property_attributes_declarationContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_property_attributes_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(LPAREN);
			State = 381; property_attributes_list();
			State = 382; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_attributes_listContext : ParserRuleContext {
		public Property_attributeContext property_attribute(int i) {
			return GetRuleContext<Property_attributeContext>(i);
		}
		public IReadOnlyList<Property_attributeContext> property_attribute() {
			return GetRuleContexts<Property_attributeContext>();
		}
		public Property_attributes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_attributes_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_attributes_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_attributes_list(this);
		}
	}

	[RuleVersion(0)]
	public Property_attributes_listContext property_attributes_list() {
		Property_attributes_listContext _localctx = new Property_attributes_listContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_property_attributes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; property_attribute();
			State = 389;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 385; Match(COMMA);
				State = 386; property_attribute();
				}
				}
				State = 391;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_attributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Property_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Property_attributeContext property_attribute() {
		Property_attributeContext _localctx = new Property_attributeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_property_attribute);
		try {
			State = 408;
			switch (_input.La(1)) {
			case NONATOMIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; Match(NONATOMIC);
				}
				break;
			case ASSIGNPA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393; Match(ASSIGNPA);
				}
				break;
			case WEAK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 394; Match(WEAK);
				}
				break;
			case STRONG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 395; Match(STRONG);
				}
				break;
			case RETAIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 396; Match(RETAIN);
				}
				break;
			case READONLY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 397; Match(READONLY);
				}
				break;
			case READWRITE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 398; Match(READWRITE);
				}
				break;
			case RPAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 8);
				{
				}
				break;
			case GETTER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 400; Match(GETTER);
				State = 401; Match(ASSIGN);
				State = 402; Match(IDENTIFIER);
				}
				break;
			case SETTER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 403; Match(SETTER);
				State = 404; Match(ASSIGN);
				State = 405; Match(IDENTIFIER);
				State = 406; Match(COLON);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 407; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Superclass_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Superclass_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSuperclass_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSuperclass_name(this);
		}
	}

	[RuleVersion(0)]
	public Superclass_nameContext superclass_name() {
		Superclass_nameContext _localctx = new Superclass_nameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_superclass_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Category_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterCategory_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitCategory_name(this);
		}
	}

	[RuleVersion(0)]
	public Category_nameContext category_name() {
		Category_nameContext _localctx = new Category_nameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_category_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Protocol_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_name(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_nameContext protocol_name() {
		Protocol_nameContext _localctx = new Protocol_nameContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_protocol_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_variablesContext : ParserRuleContext {
		public Struct_declarationContext struct_declaration(int i) {
			return GetRuleContext<Struct_declarationContext>(i);
		}
		public Visibility_specificationContext visibility_specification() {
			return GetRuleContext<Visibility_specificationContext>(0);
		}
		public Instance_variablesContext instance_variables() {
			return GetRuleContext<Instance_variablesContext>(0);
		}
		public IReadOnlyList<Struct_declarationContext> struct_declaration() {
			return GetRuleContexts<Struct_declarationContext>();
		}
		public Instance_variablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_variables; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInstance_variables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInstance_variables(this);
		}
	}

	[RuleVersion(0)]
	public Instance_variablesContext instance_variables() {
		Instance_variablesContext _localctx = new Instance_variablesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_instance_variables);
		int _la;
		try {
			State = 454;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; Match(LBRACE);
				State = 422;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					{
					State = 419; struct_declaration();
					}
					}
					State = 424;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 425; Match(RBRACE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; Match(LBRACE);
				State = 427; visibility_specification();
				State = 429;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 428; struct_declaration();
					}
					}
					State = 431;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
				State = 433; Match(RBRACE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435; Match(LBRACE);
				State = 437;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 436; struct_declaration();
					}
					}
					State = 439;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
				State = 441; instance_variables();
				State = 442; Match(RBRACE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 444; Match(LBRACE);
				State = 445; visibility_specification();
				State = 447;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 446; struct_declaration();
					}
					}
					State = 449;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
				State = 451; instance_variables();
				State = 452; Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Visibility_specificationContext : ParserRuleContext {
		public Visibility_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterVisibility_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitVisibility_specification(this);
		}
	}

	[RuleVersion(0)]
	public Visibility_specificationContext visibility_specification() {
		Visibility_specificationContext _localctx = new Visibility_specificationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_visibility_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PACKAGE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declaration_listContext : ParserRuleContext {
		public IReadOnlyList<Property_declarationContext> property_declaration() {
			return GetRuleContexts<Property_declarationContext>();
		}
		public Instance_method_declarationContext instance_method_declaration(int i) {
			return GetRuleContext<Instance_method_declarationContext>(i);
		}
		public IReadOnlyList<DeclarationContext> declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public IReadOnlyList<Instance_method_declarationContext> instance_method_declaration() {
			return GetRuleContexts<Instance_method_declarationContext>();
		}
		public IReadOnlyList<Class_method_declarationContext> class_method_declaration() {
			return GetRuleContexts<Class_method_declarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public Class_method_declarationContext class_method_declaration(int i) {
			return GetRuleContext<Class_method_declarationContext>(i);
		}
		public Property_declarationContext property_declaration(int i) {
			return GetRuleContext<Property_declarationContext>(i);
		}
		public Interface_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInterface_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInterface_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declaration_listContext interface_declaration_list() {
		Interface_declaration_listContext _localctx = new Interface_declaration_listContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_interface_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 462;
					switch (_input.La(1)) {
					case AUTO:
					case BYCOPY:
					case BYREF:
					case CHAR:
					case CONST:
					case DOUBLE:
					case ENUM:
					case EXTERN:
					case FLOAT:
					case ID:
					case IN:
					case INOUT:
					case INT:
					case LONG:
					case ONEWAY:
					case OUT:
					case REGISTER:
					case SHORT:
					case SIGNED:
					case STATIC:
					case STRUCT:
					case TYPEDEF:
					case UNION:
					case UNSIGNED:
					case VOID:
					case VOLATILE:
					case NS_OPTIONS:
					case NS_ENUM:
					case WWEAK:
					case WUNSAFE_UNRETAINED:
					case IDENTIFIER:
						{
						State = 458; declaration();
						}
						break;
					case ADD:
						{
						State = 459; class_method_declaration();
						}
						break;
					case SUB:
						{
						State = 460; instance_method_declaration();
						}
						break;
					case PROPERTY:
						{
						State = 461; property_declaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 464;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_method_declarationContext : ParserRuleContext {
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Class_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_method_declarationContext class_method_declaration() {
		Class_method_declarationContext _localctx = new Class_method_declarationContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_class_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 466; Match(ADD);
			State = 467; method_declaration();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_method_declarationContext : ParserRuleContext {
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Instance_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInstance_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInstance_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Instance_method_declarationContext instance_method_declaration() {
		Instance_method_declarationContext _localctx = new Instance_method_declarationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_instance_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 469; Match(SUB);
			State = 470; method_declaration();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_selectorContext method_selector() {
			return GetRuleContext<Method_selectorContext>(0);
		}
		public Method_typeContext method_type() {
			return GetRuleContext<Method_typeContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 472; method_type();
				}
			}

			State = 475; method_selector();
			State = 476; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implementation_definition_listContext : ParserRuleContext {
		public IReadOnlyList<Property_implementationContext> property_implementation() {
			return GetRuleContexts<Property_implementationContext>();
		}
		public IReadOnlyList<Class_method_definitionContext> class_method_definition() {
			return GetRuleContexts<Class_method_definitionContext>();
		}
		public Instance_method_definitionContext instance_method_definition(int i) {
			return GetRuleContext<Instance_method_definitionContext>(i);
		}
		public IReadOnlyList<DeclarationContext> declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public IReadOnlyList<Instance_method_definitionContext> instance_method_definition() {
			return GetRuleContexts<Instance_method_definitionContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public Function_definitionContext function_definition(int i) {
			return GetRuleContext<Function_definitionContext>(i);
		}
		public Class_method_definitionContext class_method_definition(int i) {
			return GetRuleContext<Class_method_definitionContext>(i);
		}
		public IReadOnlyList<Function_definitionContext> function_definition() {
			return GetRuleContexts<Function_definitionContext>();
		}
		public Property_implementationContext property_implementation(int i) {
			return GetRuleContext<Property_implementationContext>(i);
		}
		public Implementation_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation_definition_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterImplementation_definition_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitImplementation_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Implementation_definition_listContext implementation_definition_list() {
		Implementation_definition_listContext _localctx = new Implementation_definition_listContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_implementation_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 483;
				switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					State = 478; function_definition();
					}
					break;

				case 2:
					{
					State = 479; declaration();
					}
					break;

				case 3:
					{
					State = 480; class_method_definition();
					}
					break;

				case 4:
					{
					State = 481; instance_method_definition();
					}
					break;

				case 5:
					{
					State = 482; property_implementation();
					}
					break;
				}
				}
				State = 485;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DYNAMIC) | (1L << SYNTHESIZE) | (1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (LPAREN - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (MUL - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_method_definitionContext : ParserRuleContext {
		public Method_definitionContext method_definition() {
			return GetRuleContext<Method_definitionContext>(0);
		}
		public Class_method_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_method_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterClass_method_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitClass_method_definition(this);
		}
	}

	[RuleVersion(0)]
	public Class_method_definitionContext class_method_definition() {
		Class_method_definitionContext _localctx = new Class_method_definitionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_class_method_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 487; Match(ADD);
			State = 488; method_definition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instance_method_definitionContext : ParserRuleContext {
		public Method_definitionContext method_definition() {
			return GetRuleContext<Method_definitionContext>(0);
		}
		public Instance_method_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance_method_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInstance_method_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInstance_method_definition(this);
		}
	}

	[RuleVersion(0)]
	public Instance_method_definitionContext instance_method_definition() {
		Instance_method_definitionContext _localctx = new Instance_method_definitionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_instance_method_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 490; Match(SUB);
			State = 491; method_definition();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_definitionContext : ParserRuleContext {
		public Method_selectorContext method_selector() {
			return GetRuleContext<Method_selectorContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Method_typeContext method_type() {
			return GetRuleContext<Method_typeContext>(0);
		}
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public Method_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMethod_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMethod_definition(this);
		}
	}

	[RuleVersion(0)]
	public Method_definitionContext method_definition() {
		Method_definitionContext _localctx = new Method_definitionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_method_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 493; method_type();
				}
			}

			State = 496; method_selector();
			State = 498;
			_la = _input.La(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (MUL - 69)) | (1L << (IDENTIFIER - 69)))) != 0)) {
				{
				State = 497; init_declarator_list();
				}
			}

			State = 501;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 500; Match(SEMI);
				}
			}

			State = 503; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_selectorContext : ParserRuleContext {
		public Keyword_declaratorContext keyword_declarator(int i) {
			return GetRuleContext<Keyword_declaratorContext>(i);
		}
		public IReadOnlyList<Keyword_declaratorContext> keyword_declarator() {
			return GetRuleContexts<Keyword_declaratorContext>();
		}
		public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Method_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMethod_selector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMethod_selector(this);
		}
	}

	[RuleVersion(0)]
	public Method_selectorContext method_selector() {
		Method_selectorContext _localctx = new Method_selectorContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_method_selector);
		try {
			int _alt;
			State = 514;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; selector();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 507;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 506; keyword_declarator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 509;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 512;
				switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					State = 511; parameter_list();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_declaratorContext : ParserRuleContext {
		public Method_typeContext method_type(int i) {
			return GetRuleContext<Method_typeContext>(i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public IReadOnlyList<Method_typeContext> method_type() {
			return GetRuleContexts<Method_typeContext>();
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Keyword_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterKeyword_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitKeyword_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_declaratorContext keyword_declarator() {
		Keyword_declaratorContext _localctx = new Keyword_declaratorContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_keyword_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 516; selector();
				}
			}

			State = 519; Match(COLON);
			State = 523;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LPAREN) {
				{
				{
				State = 520; method_type();
				}
				}
				State = 525;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 526; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Method_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMethod_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMethod_type(this);
		}
	}

	[RuleVersion(0)]
	public Method_typeContext method_type() {
		Method_typeContext _localctx = new Method_typeContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_method_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(LPAREN);
			State = 531; type_name();
			State = 532; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_implementationContext : ParserRuleContext {
		public Property_synthesize_listContext property_synthesize_list() {
			return GetRuleContext<Property_synthesize_listContext>(0);
		}
		public Property_implementationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_implementation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_implementation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_implementation(this);
		}
	}

	[RuleVersion(0)]
	public Property_implementationContext property_implementation() {
		Property_implementationContext _localctx = new Property_implementationContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_property_implementation);
		try {
			State = 542;
			switch (_input.La(1)) {
			case SYNTHESIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534; Match(SYNTHESIZE);
				State = 535; property_synthesize_list();
				State = 536; Match(SEMI);
				}
				break;
			case DYNAMIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538; Match(DYNAMIC);
				State = 539; property_synthesize_list();
				State = 540; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_synthesize_listContext : ParserRuleContext {
		public IReadOnlyList<Property_synthesize_itemContext> property_synthesize_item() {
			return GetRuleContexts<Property_synthesize_itemContext>();
		}
		public Property_synthesize_itemContext property_synthesize_item(int i) {
			return GetRuleContext<Property_synthesize_itemContext>(i);
		}
		public Property_synthesize_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_synthesize_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_synthesize_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_synthesize_list(this);
		}
	}

	[RuleVersion(0)]
	public Property_synthesize_listContext property_synthesize_list() {
		Property_synthesize_listContext _localctx = new Property_synthesize_listContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_property_synthesize_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; property_synthesize_item();
			State = 549;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 545; Match(COMMA);
				State = 546; property_synthesize_item();
				}
				}
				State = 551;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_synthesize_itemContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ObjCParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(ObjCParser.IDENTIFIER); }
		public Property_synthesize_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_synthesize_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProperty_synthesize_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProperty_synthesize_item(this);
		}
	}

	[RuleVersion(0)]
	public Property_synthesize_itemContext property_synthesize_item() {
		Property_synthesize_itemContext _localctx = new Property_synthesize_itemContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_property_synthesize_item);
		try {
			State = 556;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 552; Match(IDENTIFIER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553; Match(IDENTIFIER);
				State = 554; Match(ASSIGN);
				State = 555; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_typeContext : ParserRuleContext {
		public IReadOnlyList<Type_specifierContext> type_specifier() {
			return GetRuleContexts<Type_specifierContext>();
		}
		public Type_specifierContext type_specifier(int i) {
			return GetRuleContext<Type_specifierContext>(i);
		}
		public Block_parametersContext block_parameters() {
			return GetRuleContext<Block_parametersContext>(0);
		}
		public Block_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterBlock_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitBlock_type(this);
		}
	}

	[RuleVersion(0)]
	public Block_typeContext block_type() {
		Block_typeContext _localctx = new Block_typeContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_block_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; type_specifier();
			State = 559; Match(LPAREN);
			State = 560; Match(CARET);
			State = 562;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 561; type_specifier();
				}
			}

			State = 564; Match(RPAREN);
			State = 566;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 565; block_parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		public Struct_or_union_specifierContext struct_or_union_specifier() {
			return GetRuleContext<Struct_or_union_specifierContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Protocol_reference_listContext protocol_reference_list() {
			return GetRuleContext<Protocol_reference_listContext>(0);
		}
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Enum_specifierContext enum_specifier() {
			return GetRuleContext<Enum_specifierContext>(0);
		}
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterType_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitType_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		Type_specifierContext _localctx = new Type_specifierContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_type_specifier);
		int _la;
		try {
			State = 590;
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568; Match(VOID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569; Match(CHAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 570; Match(SHORT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 571; Match(INT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 572; Match(LONG);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 573; Match(FLOAT);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 574; Match(DOUBLE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 575; Match(SIGNED);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 576; Match(UNSIGNED);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				{
				State = 577; Match(ID);
				State = 579;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 578; protocol_reference_list();
					}
				}

				}
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				{
				State = 581; class_name();
				State = 583;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 582; protocol_reference_list();
					}
				}

				}
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 585; struct_or_union_specifier();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 586; enum_specifier();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 587; Match(IDENTIFIER);
				State = 588; pointer();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 589; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_qualifierContext : ParserRuleContext {
		public Protocol_qualifierContext protocol_qualifier() {
			return GetRuleContext<Protocol_qualifierContext>(0);
		}
		public Type_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterType_qualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitType_qualifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_qualifierContext type_qualifier() {
		Type_qualifierContext _localctx = new Type_qualifierContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_type_qualifier);
		try {
			State = 595;
			switch (_input.La(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; Match(CONST);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; Match(VOLATILE);
				}
				break;
			case BYCOPY:
			case BYREF:
			case IN:
			case INOUT:
			case ONEWAY:
			case OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594; protocol_qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_qualifierContext : ParserRuleContext {
		public Protocol_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_qualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_qualifier(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_qualifierContext protocol_qualifier() {
		Protocol_qualifierContext _localctx = new Protocol_qualifierContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_protocol_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYCOPY) | (1L << BYREF) | (1L << IN) | (1L << INOUT) | (1L << ONEWAY) | (1L << OUT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Block_expressionContext block_expression() {
			return GetRuleContext<Block_expressionContext>(0);
		}
		public Message_expressionContext message_expression() {
			return GetRuleContext<Message_expressionContext>(0);
		}
		public Encode_expressionContext encode_expression() {
			return GetRuleContext<Encode_expressionContext>(0);
		}
		public Array_expressionContext array_expression() {
			return GetRuleContext<Array_expressionContext>(0);
		}
		public Dictionary_expressionContext dictionary_expression() {
			return GetRuleContext<Dictionary_expressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(ObjCParser.STRING_LITERAL, 0); }
		public Box_expressionContext box_expression() {
			return GetRuleContext<Box_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Protocol_expressionContext protocol_expression() {
			return GetRuleContext<Protocol_expressionContext>(0);
		}
		public Selector_expressionContext selector_expression() {
			return GetRuleContext<Selector_expressionContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_primary_expression);
		try {
			State = 616;
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599; Match(IDENTIFIER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600; constant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 601; Match(STRING_LITERAL);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 602; Match(LPAREN);
				State = 603; expression();
				State = 604; Match(RPAREN);
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 606; Match(SELF);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 607; Match(SUPER);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 608; message_expression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 609; selector_expression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 610; protocol_expression();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 611; encode_expression();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 612; dictionary_expression();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 613; array_expression();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 614; box_expression();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 615; block_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_pairContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression(int i) {
			return GetRuleContext<Postfix_expressionContext>(i);
		}
		public IReadOnlyList<Postfix_expressionContext> postfix_expression() {
			return GetRuleContexts<Postfix_expressionContext>();
		}
		public Dictionary_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDictionary_pair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDictionary_pair(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_pairContext dictionary_pair() {
		Dictionary_pairContext _localctx = new Dictionary_pairContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_dictionary_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; postfix_expression();
			State = 619; Match(COLON);
			State = 620; postfix_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_expressionContext : ParserRuleContext {
		public IReadOnlyList<Dictionary_pairContext> dictionary_pair() {
			return GetRuleContexts<Dictionary_pairContext>();
		}
		public Dictionary_pairContext dictionary_pair(int i) {
			return GetRuleContext<Dictionary_pairContext>(i);
		}
		public Dictionary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDictionary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDictionary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_expressionContext dictionary_expression() {
		Dictionary_expressionContext _localctx = new Dictionary_expressionContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_dictionary_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(AT);
			State = 623; Match(LBRACE);
			State = 625;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
				{
				State = 624; dictionary_pair();
				}
			}

			State = 631;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 627; Match(COMMA);
					State = 628; dictionary_pair();
					}
					} 
				}
				State = 633;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			}
			State = 635;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 634; Match(COMMA);
				}
			}

			State = 637; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_expressionContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression(int i) {
			return GetRuleContext<Postfix_expressionContext>(i);
		}
		public IReadOnlyList<Postfix_expressionContext> postfix_expression() {
			return GetRuleContexts<Postfix_expressionContext>();
		}
		public Array_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterArray_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitArray_expression(this);
		}
	}

	[RuleVersion(0)]
	public Array_expressionContext array_expression() {
		Array_expressionContext _localctx = new Array_expressionContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_array_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; Match(AT);
			State = 640; Match(LBRACK);
			State = 642;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
				{
				State = 641; postfix_expression();
				}
			}

			State = 648;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 644; Match(COMMA);
					State = 645; postfix_expression();
					}
					} 
				}
				State = 650;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			}
			State = 652;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 651; Match(COMMA);
				}
			}

			State = 654; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Box_expressionContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Box_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_box_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterBox_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitBox_expression(this);
		}
	}

	[RuleVersion(0)]
	public Box_expressionContext box_expression() {
		Box_expressionContext _localctx = new Box_expressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_box_expression);
		try {
			State = 663;
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656; Match(AT);
				State = 657; Match(LPAREN);
				State = 658; postfix_expression();
				State = 659; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661; Match(AT);
				State = 662; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_parametersContext : ParserRuleContext {
		public IReadOnlyList<Type_variable_declaratorContext> type_variable_declarator() {
			return GetRuleContexts<Type_variable_declaratorContext>();
		}
		public Type_variable_declaratorContext type_variable_declarator(int i) {
			return GetRuleContext<Type_variable_declaratorContext>(i);
		}
		public Block_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterBlock_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitBlock_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Block_parametersContext block_parameters() {
		Block_parametersContext _localctx = new Block_parametersContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_block_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; Match(LPAREN);
			State = 668;
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 666; type_variable_declarator();
				}
				break;

			case 2:
				{
				State = 667; Match(VOID);
				}
				break;
			}
			State = 674;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 670; Match(COMMA);
				State = 671; type_variable_declarator();
				}
				}
				State = 676;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 677; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_expressionContext : ParserRuleContext {
		public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Block_parametersContext block_parameters() {
			return GetRuleContext<Block_parametersContext>(0);
		}
		public Block_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterBlock_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitBlock_expression(this);
		}
	}

	[RuleVersion(0)]
	public Block_expressionContext block_expression() {
		Block_expressionContext _localctx = new Block_expressionContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_block_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(CARET);
			State = 681;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << INT) | (1L << LONG) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 680; type_specifier();
				}
			}

			State = 684;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 683; block_parameters();
				}
			}

			State = 686; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_expressionContext : ParserRuleContext {
		public Message_selectorContext message_selector() {
			return GetRuleContext<Message_selectorContext>(0);
		}
		public ReceiverContext receiver() {
			return GetRuleContext<ReceiverContext>(0);
		}
		public Message_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMessage_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMessage_expression(this);
		}
	}

	[RuleVersion(0)]
	public Message_expressionContext message_expression() {
		Message_expressionContext _localctx = new Message_expressionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_message_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(LBRACK);
			State = 689; receiver();
			State = 690; message_selector();
			State = 691; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverContext : ParserRuleContext {
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiver; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterReceiver(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitReceiver(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverContext receiver() {
		ReceiverContext _localctx = new ReceiverContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_receiver);
		try {
			State = 696;
			switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 693; expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 694; class_name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 695; Match(SUPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_selectorContext : ParserRuleContext {
		public IReadOnlyList<Keyword_argumentContext> keyword_argument() {
			return GetRuleContexts<Keyword_argumentContext>();
		}
		public Keyword_argumentContext keyword_argument(int i) {
			return GetRuleContext<Keyword_argumentContext>(i);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Message_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_selector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMessage_selector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMessage_selector(this);
		}
	}

	[RuleVersion(0)]
	public Message_selectorContext message_selector() {
		Message_selectorContext _localctx = new Message_selectorContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_message_selector);
		int _la;
		try {
			State = 704;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698; selector();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 700;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 699; keyword_argument();
					}
					}
					State = 702;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COLON || _la==IDENTIFIER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_argumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Keyword_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterKeyword_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitKeyword_argument(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_argumentContext keyword_argument() {
		Keyword_argumentContext _localctx = new Keyword_argumentContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_keyword_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 706; selector();
				}
			}

			State = 709; Match(COLON);
			State = 710; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_expressionContext : ParserRuleContext {
		public Selector_nameContext selector_name() {
			return GetRuleContext<Selector_nameContext>(0);
		}
		public Selector_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSelector_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSelector_expression(this);
		}
	}

	[RuleVersion(0)]
	public Selector_expressionContext selector_expression() {
		Selector_expressionContext _localctx = new Selector_expressionContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_selector_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(SELECTOR);
			State = 713; Match(LPAREN);
			State = 714; selector_name();
			State = 715; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_nameContext : ParserRuleContext {
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public IReadOnlyList<SelectorContext> selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public Selector_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSelector_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSelector_name(this);
		}
	}

	[RuleVersion(0)]
	public Selector_nameContext selector_name() {
		Selector_nameContext _localctx = new Selector_nameContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_selector_name);
		int _la;
		try {
			State = 726;
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 717; selector();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 719;
					_la = _input.La(1);
					if (_la==IDENTIFIER) {
						{
						State = 718; selector();
						}
					}

					State = 721; Match(COLON);
					}
					}
					State = 724;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COLON || _la==IDENTIFIER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_expressionContext : ParserRuleContext {
		public Protocol_nameContext protocol_name() {
			return GetRuleContext<Protocol_nameContext>(0);
		}
		public Protocol_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterProtocol_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitProtocol_expression(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_expressionContext protocol_expression() {
		Protocol_expressionContext _localctx = new Protocol_expressionContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_protocol_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; Match(PROTOCOL);
			State = 729; Match(LPAREN);
			State = 730; protocol_name();
			State = 731; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encode_expressionContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Encode_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encode_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterEncode_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitEncode_expression(this);
		}
	}

	[RuleVersion(0)]
	public Encode_expressionContext encode_expression() {
		Encode_expressionContext _localctx = new Encode_expressionContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_encode_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(ENCODE);
			State = 734; Match(LPAREN);
			State = 735; type_name();
			State = 736; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_variable_declaratorContext : ParserRuleContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Type_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterType_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitType_variable_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Type_variable_declaratorContext type_variable_declarator() {
		Type_variable_declaratorContext _localctx = new Type_variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_type_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; declaration_specifiers();
			State = 740;
			_la = _input.La(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (MUL - 69)) | (1L << (IDENTIFIER - 69)))) != 0)) {
				{
				State = 739; declarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_try_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742; Match(TRY);
			State = 743; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_statementContext : ParserRuleContext {
		public Type_variable_declaratorContext type_variable_declarator() {
			return GetRuleContext<Type_variable_declaratorContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Catch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterCatch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitCatch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Catch_statementContext catch_statement() {
		Catch_statementContext _localctx = new Catch_statementContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_catch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(CATCH);
			State = 746; Match(LPAREN);
			State = 747; type_variable_declarator();
			State = 748; Match(RPAREN);
			State = 749; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_statementContext : ParserRuleContext {
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Finally_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterFinally_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitFinally_statement(this);
		}
	}

	[RuleVersion(0)]
	public Finally_statementContext finally_statement() {
		Finally_statementContext _localctx = new Finally_statementContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_finally_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(FINALLY);
			State = 752; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_throw_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754; Match(THROW);
			State = 755; Match(LPAREN);
			State = 756; Match(IDENTIFIER);
			State = 757; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_blockContext : ParserRuleContext {
		public Finally_statementContext finally_statement() {
			return GetRuleContext<Finally_statementContext>(0);
		}
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public IReadOnlyList<Catch_statementContext> catch_statement() {
			return GetRuleContexts<Catch_statementContext>();
		}
		public Catch_statementContext catch_statement(int i) {
			return GetRuleContext<Catch_statementContext>(i);
		}
		public Try_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterTry_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitTry_block(this);
		}
	}

	[RuleVersion(0)]
	public Try_blockContext try_block() {
		Try_blockContext _localctx = new Try_blockContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_try_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; try_statement();
			State = 763;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CATCH) {
				{
				{
				State = 760; catch_statement();
				}
				}
				State = 765;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 767;
			_la = _input.La(1);
			if (_la==FINALLY) {
				{
				State = 766; finally_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Synchronized_statementContext : ParserRuleContext {
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Synchronized_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronized_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSynchronized_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSynchronized_statement(this);
		}
	}

	[RuleVersion(0)]
	public Synchronized_statementContext synchronized_statement() {
		Synchronized_statementContext _localctx = new Synchronized_statementContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_synchronized_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769; Match(SYNCHRONIZED);
			State = 770; Match(LPAREN);
			State = 771; primary_expression();
			State = 772; Match(RPAREN);
			State = 773; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Autorelease_statementContext : ParserRuleContext {
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Autorelease_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autorelease_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAutorelease_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAutorelease_statement(this);
		}
	}

	[RuleVersion(0)]
	public Autorelease_statementContext autorelease_statement() {
		Autorelease_statementContext _localctx = new Autorelease_statementContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_autorelease_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775; Match(AUTORELEASEPOOL);
			State = 776; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_function_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 778; declaration_specifiers();
				}
				break;
			}
			State = 781; declarator();
			State = 782; compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; declaration_specifiers();
			State = 786;
			_la = _input.La(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (MUL - 69)) | (1L << (IDENTIFIER - 69)))) != 0)) {
				{
				State = 785; init_declarator_list();
				}
			}

			State = 788; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_specifiersContext : ParserRuleContext {
		public Type_qualifierContext type_qualifier(int i) {
			return GetRuleContext<Type_qualifierContext>(i);
		}
		public IReadOnlyList<Type_specifierContext> type_specifier() {
			return GetRuleContexts<Type_specifierContext>();
		}
		public Type_specifierContext type_specifier(int i) {
			return GetRuleContext<Type_specifierContext>(i);
		}
		public IReadOnlyList<Arc_behaviour_specifierContext> arc_behaviour_specifier() {
			return GetRuleContexts<Arc_behaviour_specifierContext>();
		}
		public IReadOnlyList<Type_qualifierContext> type_qualifier() {
			return GetRuleContexts<Type_qualifierContext>();
		}
		public Arc_behaviour_specifierContext arc_behaviour_specifier(int i) {
			return GetRuleContext<Arc_behaviour_specifierContext>(i);
		}
		public IReadOnlyList<Storage_class_specifierContext> storage_class_specifier() {
			return GetRuleContexts<Storage_class_specifierContext>();
		}
		public Storage_class_specifierContext storage_class_specifier(int i) {
			return GetRuleContext<Storage_class_specifierContext>(i);
		}
		public Declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_specifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDeclaration_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDeclaration_specifiers(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_specifiersContext declaration_specifiers() {
		Declaration_specifiersContext _localctx = new Declaration_specifiersContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_declaration_specifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 794;
					switch (_input.La(1)) {
					case WWEAK:
					case WUNSAFE_UNRETAINED:
						{
						State = 790; arc_behaviour_specifier();
						}
						break;
					case AUTO:
					case EXTERN:
					case REGISTER:
					case STATIC:
					case TYPEDEF:
						{
						State = 791; storage_class_specifier();
						}
						break;
					case CHAR:
					case DOUBLE:
					case ENUM:
					case FLOAT:
					case ID:
					case INT:
					case LONG:
					case SHORT:
					case SIGNED:
					case STRUCT:
					case UNION:
					case UNSIGNED:
					case VOID:
					case NS_OPTIONS:
					case NS_ENUM:
					case IDENTIFIER:
						{
						State = 792; type_specifier();
						}
						break;
					case BYCOPY:
					case BYREF:
					case CONST:
					case IN:
					case INOUT:
					case ONEWAY:
					case OUT:
					case VOLATILE:
						{
						State = 793; type_qualifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 796;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,75,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arc_behaviour_specifierContext : ParserRuleContext {
		public Arc_behaviour_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arc_behaviour_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterArc_behaviour_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitArc_behaviour_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Arc_behaviour_specifierContext arc_behaviour_specifier() {
		Arc_behaviour_specifierContext _localctx = new Arc_behaviour_specifierContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_arc_behaviour_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			_la = _input.La(1);
			if ( !(_la==WWEAK || _la==WUNSAFE_UNRETAINED) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Storage_class_specifierContext : ParserRuleContext {
		public Storage_class_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storage_class_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStorage_class_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStorage_class_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Storage_class_specifierContext storage_class_specifier() {
		Storage_class_specifierContext _localctx = new Storage_class_specifierContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_storage_class_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << EXTERN) | (1L << REGISTER) | (1L << STATIC) | (1L << TYPEDEF))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declarator_listContext : ParserRuleContext {
		public Init_declaratorContext init_declarator(int i) {
			return GetRuleContext<Init_declaratorContext>(i);
		}
		public IReadOnlyList<Init_declaratorContext> init_declarator() {
			return GetRuleContexts<Init_declaratorContext>();
		}
		public Init_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInit_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInit_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Init_declarator_listContext init_declarator_list() {
		Init_declarator_listContext _localctx = new Init_declarator_listContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_init_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802; init_declarator();
			State = 807;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 803; Match(COMMA);
				State = 804; init_declarator();
				}
				}
				State = 809;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_declaratorContext : ParserRuleContext {
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Init_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInit_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInit_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Init_declaratorContext init_declarator() {
		Init_declaratorContext _localctx = new Init_declaratorContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_init_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; declarator();
			State = 813;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 811; Match(ASSIGN);
				State = 812; initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_union_specifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public Struct_declarationContext struct_declaration(int i) {
			return GetRuleContext<Struct_declarationContext>(i);
		}
		public IReadOnlyList<Struct_declarationContext> struct_declaration() {
			return GetRuleContexts<Struct_declarationContext>();
		}
		public Struct_or_union_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_union_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStruct_or_union_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStruct_or_union_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_union_specifierContext struct_or_union_specifier() {
		Struct_or_union_specifierContext _localctx = new Struct_or_union_specifierContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_struct_or_union_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_la = _input.La(1);
			if ( !(_la==STRUCT || _la==UNION) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 828;
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 816; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 818;
				_la = _input.La(1);
				if (_la==IDENTIFIER) {
					{
					State = 817; Match(IDENTIFIER);
					}
				}

				State = 820; Match(LBRACE);
				State = 822;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 821; struct_declaration();
					}
					}
					State = 824;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << SHORT) | (1L << SIGNED) | (1L << STRUCT) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
				State = 826; Match(RBRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		public Struct_declarator_listContext struct_declarator_list() {
			return GetRuleContext<Struct_declarator_listContext>(0);
		}
		public Specifier_qualifier_listContext specifier_qualifier_list() {
			return GetRuleContext<Specifier_qualifier_listContext>(0);
		}
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_struct_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; specifier_qualifier_list();
			State = 831; struct_declarator_list();
			State = 832; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specifier_qualifier_listContext : ParserRuleContext {
		public Type_qualifierContext type_qualifier(int i) {
			return GetRuleContext<Type_qualifierContext>(i);
		}
		public IReadOnlyList<Type_specifierContext> type_specifier() {
			return GetRuleContexts<Type_specifierContext>();
		}
		public Type_specifierContext type_specifier(int i) {
			return GetRuleContext<Type_specifierContext>(i);
		}
		public IReadOnlyList<Arc_behaviour_specifierContext> arc_behaviour_specifier() {
			return GetRuleContexts<Arc_behaviour_specifierContext>();
		}
		public IReadOnlyList<Type_qualifierContext> type_qualifier() {
			return GetRuleContexts<Type_qualifierContext>();
		}
		public Arc_behaviour_specifierContext arc_behaviour_specifier(int i) {
			return GetRuleContext<Arc_behaviour_specifierContext>(i);
		}
		public Specifier_qualifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifier_qualifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSpecifier_qualifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSpecifier_qualifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Specifier_qualifier_listContext specifier_qualifier_list() {
		Specifier_qualifier_listContext _localctx = new Specifier_qualifier_listContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_specifier_qualifier_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 837;
					switch (_input.La(1)) {
					case WWEAK:
					case WUNSAFE_UNRETAINED:
						{
						State = 834; arc_behaviour_specifier();
						}
						break;
					case CHAR:
					case DOUBLE:
					case ENUM:
					case FLOAT:
					case ID:
					case INT:
					case LONG:
					case SHORT:
					case SIGNED:
					case STRUCT:
					case UNION:
					case UNSIGNED:
					case VOID:
					case NS_OPTIONS:
					case NS_ENUM:
					case IDENTIFIER:
						{
						State = 835; type_specifier();
						}
						break;
					case BYCOPY:
					case BYREF:
					case CONST:
					case IN:
					case INOUT:
					case ONEWAY:
					case OUT:
					case VOLATILE:
						{
						State = 836; type_qualifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 839;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,82,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarator_listContext : ParserRuleContext {
		public Struct_declaratorContext struct_declarator(int i) {
			return GetRuleContext<Struct_declaratorContext>(i);
		}
		public IReadOnlyList<Struct_declaratorContext> struct_declarator() {
			return GetRuleContexts<Struct_declaratorContext>();
		}
		public Struct_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStruct_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStruct_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarator_listContext struct_declarator_list() {
		Struct_declarator_listContext _localctx = new Struct_declarator_listContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_struct_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841; struct_declarator();
			State = 846;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 842; Match(COMMA);
				State = 843; struct_declarator();
				}
				}
				State = 848;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaratorContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Struct_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStruct_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStruct_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaratorContext struct_declarator() {
		Struct_declaratorContext _localctx = new Struct_declaratorContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_struct_declarator);
		int _la;
		try {
			State = 855;
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 849; declarator();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851;
				_la = _input.La(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (MUL - 69)) | (1L << (IDENTIFIER - 69)))) != 0)) {
					{
					State = 850; declarator();
					}
				}

				State = 853; Match(COLON);
				State = 854; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_specifierContext : ParserRuleContext {
		public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterEnum_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitEnum_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Enum_specifierContext enum_specifier() {
		Enum_specifierContext _localctx = new Enum_specifierContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_enum_specifier);
		int _la;
		try {
			State = 895;
			switch (_input.La(1)) {
			case ENUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857; Match(ENUM);
				State = 860;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 858; Match(COLON);
					State = 859; type_name();
					}
				}

				State = 873;
				switch (_input.La(1)) {
				case IDENTIFIER:
					{
					State = 862; identifier();
					State = 867;
					switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
					case 1:
						{
						State = 863; Match(LBRACE);
						State = 864; enumerator_list();
						State = 865; Match(RBRACE);
						}
						break;
					}
					}
					break;
				case LBRACE:
					{
					State = 869; Match(LBRACE);
					State = 870; enumerator_list();
					State = 871; Match(RBRACE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NS_OPTIONS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 875; Match(NS_OPTIONS);
				State = 876; Match(LPAREN);
				State = 877; type_name();
				State = 878; Match(COMMA);
				State = 879; identifier();
				State = 880; Match(RPAREN);
				State = 881; Match(LBRACE);
				State = 882; enumerator_list();
				State = 883; Match(RBRACE);
				}
				break;
			case NS_ENUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 885; Match(NS_ENUM);
				State = 886; Match(LPAREN);
				State = 887; type_name();
				State = 888; Match(COMMA);
				State = 889; identifier();
				State = 890; Match(RPAREN);
				State = 891; Match(LBRACE);
				State = 892; enumerator_list();
				State = 893; Match(RBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_listContext : ParserRuleContext {
		public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		public IReadOnlyList<EnumeratorContext> enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		public Enumerator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterEnumerator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitEnumerator_list(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_listContext enumerator_list() {
		Enumerator_listContext _localctx = new Enumerator_listContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_enumerator_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; enumerator();
			State = 902;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 898; Match(COMMA);
					State = 899; enumerator();
					}
					} 
				}
				State = 904;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			}
			State = 906;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 905; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908; identifier();
			State = 911;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 909; Match(ASSIGN);
				State = 910; constant_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_pointer);
		int _la;
		try {
			State = 922;
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 913; Match(MUL);
				State = 915;
				switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
				case 1:
					{
					State = 914; declaration_specifiers();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 917; Match(MUL);
				State = 919;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					State = 918; declaration_specifiers();
					}
				}

				State = 921; pointer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public Direct_declaratorContext direct_declarator() {
			return GetRuleContext<Direct_declaratorContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			_la = _input.La(1);
			if (_la==MUL) {
				{
				State = 924; pointer();
				}
			}

			State = 927; direct_declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Direct_declaratorContext : ParserRuleContext {
		public Declarator_suffixContext declarator_suffix(int i) {
			return GetRuleContext<Declarator_suffixContext>(i);
		}
		public Block_parametersContext block_parameters() {
			return GetRuleContext<Block_parametersContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IReadOnlyList<Declarator_suffixContext> declarator_suffix() {
			return GetRuleContexts<Declarator_suffixContext>();
		}
		public Direct_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direct_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDirect_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDirect_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Direct_declaratorContext direct_declarator() {
		Direct_declaratorContext _localctx = new Direct_declaratorContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_direct_declarator);
		int _la;
		try {
			int _alt;
			State = 952;
			switch ( Interpreter.AdaptivePredict(_input,100,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 929; identifier();
				State = 933;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,97,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 930; declarator_suffix();
						}
						} 
					}
					State = 935;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,97,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 936; Match(LPAREN);
				State = 937; declarator();
				State = 938; Match(RPAREN);
				State = 942;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,98,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 939; declarator_suffix();
						}
						} 
					}
					State = 944;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,98,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 945; Match(LPAREN);
				State = 946; Match(CARET);
				State = 948;
				_la = _input.La(1);
				if (_la==IDENTIFIER) {
					{
					State = 947; identifier();
					}
				}

				State = 950; Match(RPAREN);
				State = 951; block_parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declarator_suffixContext : ParserRuleContext {
		public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Declarator_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator_suffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDeclarator_suffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDeclarator_suffix(this);
		}
	}

	[RuleVersion(0)]
	public Declarator_suffixContext declarator_suffix() {
		Declarator_suffixContext _localctx = new Declarator_suffixContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_declarator_suffix);
		int _la;
		try {
			State = 964;
			switch (_input.La(1)) {
			case LBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 954; Match(LBRACK);
				State = 956;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
					{
					State = 955; constant_expression();
					}
				}

				State = 958; Match(RBRACK);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 959; Match(LPAREN);
				State = 961;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					State = 960; parameter_list();
					}
				}

				State = 963; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		public Parameter_declaration_listContext parameter_declaration_list() {
			return GetRuleContext<Parameter_declaration_listContext>(0);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; parameter_declaration_list();
			State = 969;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 967; Match(COMMA);
				State = 968; Match(ELIPSIS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Abstract_declaratorContext abstract_declarator() {
			return GetRuleContext<Abstract_declaratorContext>(0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; declaration_specifiers();
			State = 976;
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				State = 973;
				switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					State = 972; declarator();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 975; abstract_declarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public IReadOnlyList<InitializerContext> initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_initializer);
		int _la;
		try {
			int _alt;
			State = 993;
			switch (_input.La(1)) {
			case ENCODE:
			case PROTOCOL:
			case SELECTOR:
			case SUPER:
			case SELF:
			case SIZEOF:
			case LPAREN:
			case LBRACK:
			case AT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case SUB:
			case MUL:
			case BITAND:
			case CARET:
			case IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 978; assignment_expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 979; Match(LBRACE);
				State = 980; initializer();
				State = 985;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,107,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 981; Match(COMMA);
						State = 982; initializer();
						}
						} 
					}
					State = 987;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,107,_ctx);
				}
				State = 989;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 988; Match(COMMA);
					}
				}

				State = 991; Match(RBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Specifier_qualifier_listContext specifier_qualifier_list() {
			return GetRuleContext<Specifier_qualifier_listContext>(0);
		}
		public Block_typeContext block_type() {
			return GetRuleContext<Block_typeContext>(0);
		}
		public Abstract_declaratorContext abstract_declarator() {
			return GetRuleContext<Abstract_declaratorContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_type_name);
		try {
			State = 999;
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995; specifier_qualifier_list();
				State = 996; abstract_declarator();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; block_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_declaratorContext : ParserRuleContext {
		public Constant_expressionContext constant_expression(int i) {
			return GetRuleContext<Constant_expressionContext>(i);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public IReadOnlyList<Constant_expressionContext> constant_expression() {
			return GetRuleContexts<Constant_expressionContext>();
		}
		public IReadOnlyList<Abstract_declarator_suffixContext> abstract_declarator_suffix() {
			return GetRuleContexts<Abstract_declarator_suffixContext>();
		}
		public Abstract_declarator_suffixContext abstract_declarator_suffix(int i) {
			return GetRuleContext<Abstract_declarator_suffixContext>(i);
		}
		public Abstract_declaratorContext abstract_declarator() {
			return GetRuleContext<Abstract_declaratorContext>(0);
		}
		public Abstract_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAbstract_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAbstract_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_declaratorContext abstract_declarator() {
		Abstract_declaratorContext _localctx = new Abstract_declaratorContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_abstract_declarator);
		int _la;
		try {
			int _alt;
			State = 1022;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1001; pointer();
				State = 1002; abstract_declarator();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004; Match(LPAREN);
				State = 1005; abstract_declarator();
				State = 1006; Match(RPAREN);
				State = 1008;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1007; abstract_declarator_suffix();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1010;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1017;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1012; Match(LBRACK);
					State = 1014;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
						{
						State = 1013; constant_expression();
						}
					}

					State = 1016; Match(RBRACK);
					}
					}
					State = 1019;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==LBRACK );
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_declarator_suffixContext : ParserRuleContext {
		public Parameter_declaration_listContext parameter_declaration_list() {
			return GetRuleContext<Parameter_declaration_listContext>(0);
		}
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Abstract_declarator_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_declarator_suffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAbstract_declarator_suffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAbstract_declarator_suffix(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_declarator_suffixContext abstract_declarator_suffix() {
		Abstract_declarator_suffixContext _localctx = new Abstract_declarator_suffixContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_abstract_declarator_suffix);
		int _la;
		try {
			State = 1034;
			switch (_input.La(1)) {
			case LBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1024; Match(LBRACK);
				State = 1026;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
					{
					State = 1025; constant_expression();
					}
				}

				State = 1028; Match(RBRACK);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029; Match(LPAREN);
				State = 1031;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << BYCOPY) | (1L << BYREF) | (1L << CHAR) | (1L << CONST) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << ID) | (1L << IN) | (1L << INOUT) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << SHORT) | (1L << SIGNED) | (1L << STATIC) | (1L << STRUCT) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NS_OPTIONS - 65)) | (1L << (NS_ENUM - 65)) | (1L << (WWEAK - 65)) | (1L << (WUNSAFE_UNRETAINED - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					State = 1030; parameter_declaration_list();
					}
				}

				State = 1033; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declaration_listContext : ParserRuleContext {
		public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		public IReadOnlyList<Parameter_declarationContext> parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		public Parameter_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterParameter_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitParameter_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declaration_listContext parameter_declaration_list() {
		Parameter_declaration_listContext _localctx = new Parameter_declaration_listContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_parameter_declaration_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; parameter_declaration();
			State = 1041;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1037; Match(COMMA);
					State = 1038; parameter_declaration();
					}
					} 
				}
				State = 1043;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1044; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1047;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Try_blockContext try_block() {
			return GetRuleContext<Try_blockContext>(0);
		}
		public Labeled_statementContext labeled_statement() {
			return GetRuleContext<Labeled_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Autorelease_statementContext autorelease_statement() {
			return GetRuleContext<Autorelease_statementContext>(0);
		}
		public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Synchronized_statementContext synchronized_statement() {
			return GetRuleContext<Synchronized_statementContext>(0);
		}
		public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_statement);
		try {
			State = 1061;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1049; labeled_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1050; expression();
				State = 1051; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1053; compound_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1054; selection_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1055; iteration_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1056; jump_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1057; synchronized_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1058; autorelease_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1059; try_block();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1060; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Labeled_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterLabeled_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitLabeled_statement(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_statementContext labeled_statement() {
		Labeled_statementContext _localctx = new Labeled_statementContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_labeled_statement);
		try {
			State = 1075;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1063; identifier();
				State = 1064; Match(COLON);
				State = 1065; statement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1067; Match(CASE);
				State = 1068; constant_expression();
				State = 1069; Match(COLON);
				State = 1070; statement();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1072; Match(DEFAULT);
				State = 1073; Match(COLON);
				State = 1074; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		public IReadOnlyList<DeclarationContext> declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		public IReadOnlyList<Statement_listContext> statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_compound_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077; Match(LBRACE);
			State = 1082;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTORELEASEPOOL) | (1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SYNCHRONIZED) | (1L << TRY) | (1L << SUPER) | (1L << SELF) | (1L << AUTO) | (1L << BREAK) | (1L << BYCOPY) | (1L << BYREF) | (1L << CASE) | (1L << CHAR) | (1L << CONST) | (1L << CONTINUE) | (1L << DEFAULT) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << EXTERN) | (1L << FLOAT) | (1L << FOR) | (1L << ID) | (1L << IF) | (1L << IN) | (1L << INOUT) | (1L << GOTO) | (1L << INT) | (1L << LONG) | (1L << ONEWAY) | (1L << OUT) | (1L << REGISTER) | (1L << RETURN) | (1L << SHORT) | (1L << SIGNED) | (1L << SIZEOF) | (1L << STATIC) | (1L << STRUCT) | (1L << SWITCH) | (1L << TYPEDEF) | (1L << UNION) | (1L << UNSIGNED) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (WHILE - 64)) | (1L << (NS_OPTIONS - 64)) | (1L << (NS_ENUM - 64)) | (1L << (WWEAK - 64)) | (1L << (WUNSAFE_UNRETAINED - 64)) | (1L << (LPAREN - 64)) | (1L << (LBRACE - 64)) | (1L << (LBRACK - 64)) | (1L << (SEMI - 64)) | (1L << (AT - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (INC - 64)) | (1L << (DEC - 64)) | (1L << (SUB - 64)) | (1L << (MUL - 64)) | (1L << (BITAND - 64)) | (1L << (CARET - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (HEX_LITERAL - 128)) | (1L << (DECIMAL_LITERAL - 128)) | (1L << (OCTAL_LITERAL - 128)) | (1L << (FLOATING_POINT_LITERAL - 128)))) != 0)) {
				{
				State = 1080;
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 1078; declaration();
					}
					break;

				case 2:
					{
					State = 1079; statement_list();
					}
					break;
				}
				}
				State = 1084;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1085; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_selection_statement);
		try {
			State = 1102;
			switch (_input.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1087; Match(IF);
				State = 1088; Match(LPAREN);
				State = 1089; expression();
				State = 1090; Match(RPAREN);
				State = 1091; statement();
				State = 1094;
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 1092; Match(ELSE);
					State = 1093; statement();
					}
					break;
				}
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1096; Match(SWITCH);
				State = 1097; Match(LPAREN);
				State = 1098; expression();
				State = 1099; Match(RPAREN);
				State = 1100; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_in_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Type_variable_declaratorContext type_variable_declarator() {
			return GetRuleContext<Type_variable_declaratorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_in_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_in_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterFor_in_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitFor_in_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_in_statementContext for_in_statement() {
		For_in_statementContext _localctx = new For_in_statementContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_for_in_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104; Match(FOR);
			State = 1105; Match(LPAREN);
			State = 1106; type_variable_declarator();
			State = 1107; Match(IN);
			State = 1109;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
				{
				State = 1108; expression();
				}
			}

			State = 1111; Match(RPAREN);
			State = 1112; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public Init_declarator_listContext init_declarator_list() {
			return GetRuleContext<Init_declarator_listContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114; Match(FOR);
			State = 1115; Match(LPAREN);
			State = 1120;
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				{
				State = 1116; declaration_specifiers();
				State = 1117; init_declarator_list();
				}
				}
				break;

			case 2:
				{
				State = 1119; expression();
				}
				break;
			}
			State = 1122; Match(SEMI);
			State = 1124;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
				{
				State = 1123; expression();
				}
			}

			State = 1126; Match(SEMI);
			State = 1128;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
				{
				State = 1127; expression();
				}
			}

			State = 1130; Match(RPAREN);
			State = 1131; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133; Match(WHILE);
			State = 1134; Match(LPAREN);
			State = 1135; expression();
			State = 1136; Match(RPAREN);
			State = 1137; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_statementContext do_statement() {
		Do_statementContext _localctx = new Do_statementContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_do_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139; Match(DO);
			State = 1140; statement();
			State = 1141; Match(WHILE);
			State = 1142; Match(LPAREN);
			State = 1143; expression();
			State = 1144; Match(RPAREN);
			State = 1145; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public For_in_statementContext for_in_statement() {
			return GetRuleContext<For_in_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Do_statementContext do_statement() {
			return GetRuleContext<Do_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_iteration_statement);
		try {
			State = 1151;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147; while_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148; do_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1149; for_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1150; for_in_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_jump_statement);
		int _la;
		try {
			State = 1166;
			switch (_input.La(1)) {
			case GOTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153; Match(GOTO);
				State = 1154; identifier();
				State = 1155; Match(SEMI);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1157; Match(CONTINUE);
				State = 1158; Match(SEMI);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1159; Match(BREAK);
				State = 1160; Match(SEMI);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1161; Match(RETURN);
				State = 1163;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
					{
					State = 1162; expression();
					}
				}

				State = 1165; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IReadOnlyList<Assignment_expressionContext> assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168; assignment_expression();
			State = 1173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1169; Match(COMMA);
				State = 1170; assignment_expression();
				}
				}
				State = 1175;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_assignment_expression);
		try {
			State = 1181;
			switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1176; conditional_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1177; unary_expression();
				State = 1178; assignment_operator();
				State = 1179; assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			_la = _input.La(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (ASSIGN - 80)) | (1L << (ADD_ASSIGN - 80)) | (1L << (SUB_ASSIGN - 80)) | (1L << (MUL_ASSIGN - 80)) | (1L << (DIV_ASSIGN - 80)) | (1L << (AND_ASSIGN - 80)) | (1L << (OR_ASSIGN - 80)) | (1L << (XOR_ASSIGN - 80)) | (1L << (MOD_ASSIGN - 80)) | (1L << (LSHIFT_ASSIGN - 80)) | (1L << (RSHIFT_ASSIGN - 80)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Logical_or_expressionContext logical_or_expression() {
			return GetRuleContext<Logical_or_expressionContext>(0);
		}
		public IReadOnlyList<Conditional_expressionContext> conditional_expression() {
			return GetRuleContexts<Conditional_expressionContext>();
		}
		public Conditional_expressionContext conditional_expression(int i) {
			return GetRuleContext<Conditional_expressionContext>(i);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_conditional_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185; logical_or_expression();
			State = 1191;
			_la = _input.La(1);
			if (_la==QUESTION) {
				{
				State = 1186; Match(QUESTION);
				State = 1187; conditional_expression();
				State = 1188; Match(COLON);
				State = 1189; conditional_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_constant_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193; conditional_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_or_expressionContext : ParserRuleContext {
		public IReadOnlyList<Logical_and_expressionContext> logical_and_expression() {
			return GetRuleContexts<Logical_and_expressionContext>();
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return GetRuleContext<Logical_and_expressionContext>(i);
		}
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Logical_or_expressionContext logical_or_expression() {
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_logical_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195; logical_and_expression();
			State = 1200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 1196; Match(OR);
				State = 1197; logical_and_expression();
				}
				}
				State = 1202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_and_expressionContext : ParserRuleContext {
		public IReadOnlyList<Inclusive_or_expressionContext> inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Logical_and_expressionContext logical_and_expression() {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_logical_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203; inclusive_or_expression();
			State = 1208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 1204; Match(AND);
				State = 1205; inclusive_or_expression();
				}
				}
				State = 1210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public IReadOnlyList<Exclusive_or_expressionContext> exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; exclusive_or_expression();
			State = 1216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITOR) {
				{
				{
				State = 1212; Match(BITOR);
				State = 1213; exclusive_or_expression();
				}
				}
				State = 1218;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public IReadOnlyList<And_expressionContext> and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219; and_expression();
			State = 1224;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CARET) {
				{
				{
				State = 1220; Match(CARET);
				State = 1221; and_expression();
				}
				}
				State = 1226;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public IReadOnlyList<Equality_expressionContext> equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227; equality_expression();
			State = 1232;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITAND) {
				{
				{
				State = 1228; Match(BITAND);
				State = 1229; equality_expression();
				}
				}
				State = 1234;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public IReadOnlyList<Relational_expressionContext> relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235; relational_expression();
			State = 1240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EQUAL || _la==NOTEQUAL) {
				{
				{
				State = 1236;
				_la = _input.La(1);
				if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1237; relational_expression();
				}
				}
				State = 1242;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public IReadOnlyList<Shift_expressionContext> shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; shift_expression();
			State = 1248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (GT - 81)) | (1L << (LT - 81)) | (1L << (LE - 81)) | (1L << (GE - 81)))) != 0)) {
				{
				{
				State = 1244;
				_la = _input.La(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (GT - 81)) | (1L << (LT - 81)) | (1L << (LE - 81)) | (1L << (GE - 81)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1245; shift_expression();
				}
				}
				State = 1250;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public IReadOnlyList<Additive_expressionContext> additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_shift_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; additive_expression();
			State = 1256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SHIFT_R || _la==SHIFT_L) {
				{
				{
				State = 1252;
				_la = _input.La(1);
				if ( !(_la==SHIFT_R || _la==SHIFT_L) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1253; additive_expression();
				}
				}
				State = 1258;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public IReadOnlyList<Multiplicative_expressionContext> multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259; multiplicative_expression();
			State = 1264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 1260;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==SUB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1261; multiplicative_expression();
				}
				}
				State = 1266;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public IReadOnlyList<Cast_expressionContext> cast_expression() {
			return GetRuleContexts<Cast_expressionContext>();
		}
		public Cast_expressionContext cast_expression(int i) {
			return GetRuleContext<Cast_expressionContext>(i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267; cast_expression();
			State = 1272;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (MUL - 97)) | (1L << (DIV - 97)) | (1L << (MOD - 97)))) != 0)) {
				{
				{
				State = 1268;
				_la = _input.La(1);
				if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (MUL - 97)) | (1L << (DIV - 97)) | (1L << (MOD - 97)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1269; cast_expression();
				}
				}
				State = 1274;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_cast_expression);
		try {
			State = 1281;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1275; Match(LPAREN);
				State = 1276; type_name();
				State = 1277; Match(RPAREN);
				State = 1278; cast_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1280; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_unary_expression);
		try {
			State = 1299;
			switch (_input.La(1)) {
			case ENCODE:
			case PROTOCOL:
			case SELECTOR:
			case SUPER:
			case SELF:
			case LPAREN:
			case LBRACK:
			case AT:
			case CARET:
			case IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case HEX_LITERAL:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1283; postfix_expression();
				}
				break;
			case INC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284; Match(INC);
				State = 1285; unary_expression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1286; Match(DEC);
				State = 1287; unary_expression();
				}
				break;
			case BANG:
			case TILDE:
			case SUB:
			case MUL:
			case BITAND:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1288; unary_operator();
				State = 1289; cast_expression();
				}
				break;
			case SIZEOF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1291; Match(SIZEOF);
				State = 1297;
				switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					State = 1292; Match(LPAREN);
					State = 1293; type_name();
					State = 1294; Match(RPAREN);
					}
					break;

				case 2:
					{
					State = 1296; unary_expression();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			_la = _input.La(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (BANG - 83)) | (1L << (TILDE - 83)) | (1L << (SUB - 83)) | (1L << (MUL - 83)) | (1L << (BITAND - 83)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<Argument_expression_listContext> argument_expression_list() {
			return GetRuleContexts<Argument_expression_listContext>();
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Argument_expression_listContext argument_expression_list(int i) {
			return GetRuleContext<Argument_expression_listContext>(i);
		}
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterPostfix_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitPostfix_expression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_postfix_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303; primary_expression();
			State = 1321;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (DOT - 69)) | (1L << (STRUCTACCESS - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)))) != 0)) {
				{
				State = 1319;
				switch (_input.La(1)) {
				case LBRACK:
					{
					State = 1304; Match(LBRACK);
					State = 1305; expression();
					State = 1306; Match(RBRACK);
					}
					break;
				case LPAREN:
					{
					State = 1308; Match(LPAREN);
					State = 1310;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENCODE) | (1L << PROTOCOL) | (1L << SELECTOR) | (1L << SUPER) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (LPAREN - 69)) | (1L << (LBRACK - 69)) | (1L << (AT - 69)) | (1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (SUB - 69)) | (1L << (MUL - 69)) | (1L << (BITAND - 69)) | (1L << (CARET - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)) | (1L << (HEX_LITERAL - 69)) | (1L << (DECIMAL_LITERAL - 69)) | (1L << (OCTAL_LITERAL - 69)) | (1L << (FLOATING_POINT_LITERAL - 69)))) != 0)) {
						{
						State = 1309; argument_expression_list();
						}
					}

					State = 1312; Match(RPAREN);
					}
					break;
				case DOT:
					{
					State = 1313; Match(DOT);
					State = 1314; identifier();
					}
					break;
				case STRUCTACCESS:
					{
					State = 1315; Match(STRUCTACCESS);
					State = 1316; identifier();
					}
					break;
				case INC:
					{
					State = 1317; Match(INC);
					}
					break;
				case DEC:
					{
					State = 1318; Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1323;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_expression_listContext : ParserRuleContext {
		public IReadOnlyList<Assignment_expressionContext> assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		public Argument_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterArgument_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitArgument_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_expression_listContext argument_expression_list() {
		Argument_expression_listContext _localctx = new Argument_expression_listContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_argument_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324; assignment_expression();
			State = 1329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1325; Match(COMMA);
				State = 1326; assignment_expression();
				}
				}
				State = 1331;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ObjCParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode OCTAL_LITERAL() { return GetToken(ObjCParser.OCTAL_LITERAL, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(ObjCParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(ObjCParser.FLOATING_POINT_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(ObjCParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(ObjCParser.HEX_LITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IObjCListener typedListener = listener as IObjCListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334;
			_la = _input.La(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (CHARACTER_LITERAL - 126)) | (1L << (HEX_LITERAL - 126)) | (1L << (DECIMAL_LITERAL - 126)) | (1L << (OCTAL_LITERAL - 126)) | (1L << (FLOATING_POINT_LITERAL - 126)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x92\x53B\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x3\x2\x6\x2\xFC\n\x2\r\x2\xE\x2\xFD\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3\x10E\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x116\n\x5\x3"+
		"\x5\x5\x5\x119\n\x5\x3\x5\x5\x5\x11C\n\x5\x3\x5\x5\x5\x11F\n\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x127\n\x6\x3\x6\x3\x6\x5\x6\x12B"+
		"\n\x6\x3\x6\x5\x6\x12E\n\x6\x3\x6\x5\x6\x131\n\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x5\a\x139\n\a\x3\a\x5\a\x13C\n\a\x3\a\x5\a\x13F\n\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x149\n\b\x3\b\x3\b\x3\t\x3\t"+
		"\x3\t\x5\t\x150\n\t\x3\t\x5\t\x153\n\t\x3\t\x5\t\x156\n\t\x3\t\x5\t\x159"+
		"\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f"+
		"\a\f\x168\n\f\f\f\xE\f\x16B\v\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE"+
		"\a\xE\x174\n\xE\f\xE\xE\xE\x177\v\xE\x3\xF\x3\xF\x5\xF\x17B\n\xF\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\x186\n\x11"+
		"\f\x11\xE\x11\x189\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5"+
		"\x12\x19B\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\a\x17\x1A7\n\x17\f\x17\xE\x17\x1AA\v\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x6\x17\x1B0\n\x17\r\x17\xE\x17\x1B1\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x6\x17\x1B8\n\x17\r\x17\xE\x17\x1B9\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x6\x17\x1C2\n\x17\r\x17\xE\x17\x1C3\x3\x17\x3\x17\x3\x17"+
		"\x5\x17\x1C9\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x6\x19\x1D1"+
		"\n\x19\r\x19\xE\x19\x1D2\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1C\x5\x1C\x1DC\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x6\x1D\x1E6\n\x1D\r\x1D\xE\x1D\x1E7\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3 \x5 \x1F1\n \x3 \x3 \x5 \x1F5\n \x3 \x5 \x1F8\n \x3"+
		" \x3 \x3!\x3!\x6!\x1FE\n!\r!\xE!\x1FF\x3!\x5!\x203\n!\x5!\x205\n!\x3\""+
		"\x5\"\x208\n\"\x3\"\x3\"\a\"\x20C\n\"\f\"\xE\"\x20F\v\"\x3\"\x3\"\x3#"+
		"\x3#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x221\n%\x3&\x3"+
		"&\x3&\a&\x226\n&\f&\xE&\x229\v&\x3\'\x3\'\x3\'\x3\'\x5\'\x22F\n\'\x3("+
		"\x3(\x3(\x3(\x5(\x235\n(\x3(\x3(\x5(\x239\n(\x3)\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x5)\x246\n)\x3)\x3)\x5)\x24A\n)\x3)\x3)\x3)\x3)\x3)"+
		"\x5)\x251\n)\x3*\x3*\x3*\x5*\x256\n*\x3+\x3+\x3,\x3,\x3,\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x26B\n,\x3-\x3-\x3-\x3-"+
		"\x3.\x3.\x3.\x5.\x274\n.\x3.\x3.\a.\x278\n.\f.\xE.\x27B\v.\x3.\x5.\x27E"+
		"\n.\x3.\x3.\x3/\x3/\x3/\x5/\x285\n/\x3/\x3/\a/\x289\n/\f/\xE/\x28C\v/"+
		"\x3/\x5/\x28F\n/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x5\x30\x29A\n\x30\x3\x31\x3\x31\x3\x31\x5\x31\x29F\n\x31\x3\x31\x3"+
		"\x31\a\x31\x2A3\n\x31\f\x31\xE\x31\x2A6\v\x31\x3\x31\x3\x31\x3\x32\x3"+
		"\x32\x5\x32\x2AC\n\x32\x3\x32\x5\x32\x2AF\n\x32\x3\x32\x3\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x5\x34\x2BB\n\x34\x3\x35"+
		"\x3\x35\x6\x35\x2BF\n\x35\r\x35\xE\x35\x2C0\x5\x35\x2C3\n\x35\x3\x36\x5"+
		"\x36\x2C6\n\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x38\x3\x38\x5\x38\x2D2\n\x38\x3\x38\x6\x38\x2D5\n\x38\r\x38\xE\x38"+
		"\x2D6\x5\x38\x2D9\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3"+
		":\x3:\x3:\x3;\x3;\x5;\x2E7\n;\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3>"+
		"\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3@\x3@\a@\x2FC\n@\f@\xE@\x2FF\v@\x3@\x5"+
		"@\x302\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42"+
		"\x3\x43\x5\x43\x30E\n\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x5\x44\x315"+
		"\n\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x6\x45\x31D\n\x45\r\x45"+
		"\xE\x45\x31E\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3H\aH\x328\nH\fH\xEH\x32B"+
		"\vH\x3I\x3I\x3I\x5I\x330\nI\x3J\x3J\x3J\x5J\x335\nJ\x3J\x3J\x6J\x339\n"+
		"J\rJ\xEJ\x33A\x3J\x3J\x5J\x33F\nJ\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x6L\x348"+
		"\nL\rL\xEL\x349\x3M\x3M\x3M\aM\x34F\nM\fM\xEM\x352\vM\x3N\x3N\x5N\x356"+
		"\nN\x3N\x3N\x5N\x35A\nN\x3O\x3O\x3O\x5O\x35F\nO\x3O\x3O\x3O\x3O\x3O\x5"+
		"O\x366\nO\x3O\x3O\x3O\x3O\x5O\x36C\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x382\nO\x3P\x3P\x3"+
		"P\aP\x387\nP\fP\xEP\x38A\vP\x3P\x5P\x38D\nP\x3Q\x3Q\x3Q\x5Q\x392\nQ\x3"+
		"R\x3R\x5R\x396\nR\x3R\x3R\x5R\x39A\nR\x3R\x5R\x39D\nR\x3S\x5S\x3A0\nS"+
		"\x3S\x3S\x3T\x3T\aT\x3A6\nT\fT\xET\x3A9\vT\x3T\x3T\x3T\x3T\aT\x3AF\nT"+
		"\fT\xET\x3B2\vT\x3T\x3T\x3T\x5T\x3B7\nT\x3T\x3T\x5T\x3BB\nT\x3U\x3U\x5"+
		"U\x3BF\nU\x3U\x3U\x3U\x5U\x3C4\nU\x3U\x5U\x3C7\nU\x3V\x3V\x3V\x5V\x3CC"+
		"\nV\x3W\x3W\x5W\x3D0\nW\x3W\x5W\x3D3\nW\x3X\x3X\x3X\x3X\x3X\aX\x3DA\n"+
		"X\fX\xEX\x3DD\vX\x3X\x5X\x3E0\nX\x3X\x3X\x5X\x3E4\nX\x3Y\x3Y\x3Y\x3Y\x5"+
		"Y\x3EA\nY\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x6Z\x3F3\nZ\rZ\xEZ\x3F4\x3Z\x3Z"+
		"\x5Z\x3F9\nZ\x3Z\x6Z\x3FC\nZ\rZ\xEZ\x3FD\x3Z\x5Z\x401\nZ\x3[\x3[\x5[\x405"+
		"\n[\x3[\x3[\x3[\x5[\x40A\n[\x3[\x5[\x40D\n[\x3\\\x3\\\x3\\\a\\\x412\n"+
		"\\\f\\\xE\\\x415\v\\\x3]\x6]\x418\n]\r]\xE]\x419\x3^\x3^\x3^\x3^\x3^\x3"+
		"^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x428\n^\x3_\x3_\x3_\x3_\x3_\x3_\x3_\x3_"+
		"\x3_\x3_\x3_\x3_\x5_\x436\n_\x3`\x3`\x3`\a`\x43B\n`\f`\xE`\x43E\v`\x3"+
		"`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x449\n\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x451\n\x61\x3\x62\x3"+
		"\x62\x3\x62\x3\x62\x3\x62\x5\x62\x458\n\x62\x3\x62\x3\x62\x3\x62\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x463\n\x63\x3\x63\x3\x63\x5"+
		"\x63\x467\n\x63\x3\x63\x3\x63\x5\x63\x46B\n\x63\x3\x63\x3\x63\x3\x63\x3"+
		"\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x482\n\x66"+
		"\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x5g\x48E\ng\x3g\x5g\x491\ng\x3"+
		"h\x3h\x3h\ah\x496\nh\fh\xEh\x499\vh\x3i\x3i\x3i\x3i\x3i\x5i\x4A0\ni\x3"+
		"j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x4AA\nk\x3l\x3l\x3m\x3m\x3m\am\x4B1"+
		"\nm\fm\xEm\x4B4\vm\x3n\x3n\x3n\an\x4B9\nn\fn\xEn\x4BC\vn\x3o\x3o\x3o\a"+
		"o\x4C1\no\fo\xEo\x4C4\vo\x3p\x3p\x3p\ap\x4C9\np\fp\xEp\x4CC\vp\x3q\x3"+
		"q\x3q\aq\x4D1\nq\fq\xEq\x4D4\vq\x3r\x3r\x3r\ar\x4D9\nr\fr\xEr\x4DC\vr"+
		"\x3s\x3s\x3s\as\x4E1\ns\fs\xEs\x4E4\vs\x3t\x3t\x3t\at\x4E9\nt\ft\xEt\x4EC"+
		"\vt\x3u\x3u\x3u\au\x4F1\nu\fu\xEu\x4F4\vu\x3v\x3v\x3v\av\x4F9\nv\fv\xE"+
		"v\x4FC\vv\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x504\nw\x3x\x3x\x3x\x3x\x3x\x3x"+
		"\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x5x\x514\nx\x5x\x516\nx\x3y\x3y\x3z\x3"+
		"z\x3z\x3z\x3z\x3z\x3z\x5z\x521\nz\x3z\x3z\x3z\x3z\x3z\x3z\x3z\az\x52A"+
		"\nz\fz\xEz\x52D\vz\x3{\x3{\x3{\a{\x532\n{\f{\xE{\x535\v{\x3|\x3|\x3}\x3"+
		"}\x3}\x2\x2\x2~\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46"+
		"\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2"+
		"\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2"+
		"\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2"+
		"\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2"+
		"\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2"+
		"\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2"+
		"\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2"+
		"\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\x2\x10"+
		"\x4\x2\x86\x86\x88\x88\x5\x2\f\f\xF\xF\x11\x12\x5\x2\x1E\x1F./\x33\x34"+
		"\x3\x2\x45\x46\a\x2\x1B\x1B))\x35\x35::==\x4\x2;;>>\x4\x2RRkt\x4\x2YY"+
		"\\\\\x4\x2STZ[\x3\x2ij\x3\x2\x61\x62\x4\x2\x63\x64hh\x5\x2UV\x62\x63\x65"+
		"\x65\x4\x2\x80\x80\x82\x85\x5A9\x2\xFB\x3\x2\x2\x2\x4\x10D\x3\x2\x2\x2"+
		"\x6\x10F\x3\x2\x2\x2\b\x111\x3\x2\x2\x2\n\x122\x3\x2\x2\x2\f\x134\x3\x2"+
		"\x2\x2\xE\x142\x3\x2\x2\x2\x10\x14C\x3\x2\x2\x2\x12\x15C\x3\x2\x2\x2\x14"+
		"\x160\x3\x2\x2\x2\x16\x164\x3\x2\x2\x2\x18\x16C\x3\x2\x2\x2\x1A\x170\x3"+
		"\x2\x2\x2\x1C\x178\x3\x2\x2\x2\x1E\x17E\x3\x2\x2\x2 \x182\x3\x2\x2\x2"+
		"\"\x19A\x3\x2\x2\x2$\x19C\x3\x2\x2\x2&\x19E\x3\x2\x2\x2(\x1A0\x3\x2\x2"+
		"\x2*\x1A2\x3\x2\x2\x2,\x1C8\x3\x2\x2\x2.\x1CA\x3\x2\x2\x2\x30\x1D0\x3"+
		"\x2\x2\x2\x32\x1D4\x3\x2\x2\x2\x34\x1D7\x3\x2\x2\x2\x36\x1DB\x3\x2\x2"+
		"\x2\x38\x1E5\x3\x2\x2\x2:\x1E9\x3\x2\x2\x2<\x1EC\x3\x2\x2\x2>\x1F0\x3"+
		"\x2\x2\x2@\x204\x3\x2\x2\x2\x42\x207\x3\x2\x2\x2\x44\x212\x3\x2\x2\x2"+
		"\x46\x214\x3\x2\x2\x2H\x220\x3\x2\x2\x2J\x222\x3\x2\x2\x2L\x22E\x3\x2"+
		"\x2\x2N\x230\x3\x2\x2\x2P\x250\x3\x2\x2\x2R\x255\x3\x2\x2\x2T\x257\x3"+
		"\x2\x2\x2V\x26A\x3\x2\x2\x2X\x26C\x3\x2\x2\x2Z\x270\x3\x2\x2\x2\\\x281"+
		"\x3\x2\x2\x2^\x299\x3\x2\x2\x2`\x29B\x3\x2\x2\x2\x62\x2A9\x3\x2\x2\x2"+
		"\x64\x2B2\x3\x2\x2\x2\x66\x2BA\x3\x2\x2\x2h\x2C2\x3\x2\x2\x2j\x2C5\x3"+
		"\x2\x2\x2l\x2CA\x3\x2\x2\x2n\x2D8\x3\x2\x2\x2p\x2DA\x3\x2\x2\x2r\x2DF"+
		"\x3\x2\x2\x2t\x2E4\x3\x2\x2\x2v\x2E8\x3\x2\x2\x2x\x2EB\x3\x2\x2\x2z\x2F1"+
		"\x3\x2\x2\x2|\x2F4\x3\x2\x2\x2~\x2F9\x3\x2\x2\x2\x80\x303\x3\x2\x2\x2"+
		"\x82\x309\x3\x2\x2\x2\x84\x30D\x3\x2\x2\x2\x86\x312\x3\x2\x2\x2\x88\x31C"+
		"\x3\x2\x2\x2\x8A\x320\x3\x2\x2\x2\x8C\x322\x3\x2\x2\x2\x8E\x324\x3\x2"+
		"\x2\x2\x90\x32C\x3\x2\x2\x2\x92\x331\x3\x2\x2\x2\x94\x340\x3\x2\x2\x2"+
		"\x96\x347\x3\x2\x2\x2\x98\x34B\x3\x2\x2\x2\x9A\x359\x3\x2\x2\x2\x9C\x381"+
		"\x3\x2\x2\x2\x9E\x383\x3\x2\x2\x2\xA0\x38E\x3\x2\x2\x2\xA2\x39C\x3\x2"+
		"\x2\x2\xA4\x39F\x3\x2\x2\x2\xA6\x3BA\x3\x2\x2\x2\xA8\x3C6\x3\x2\x2\x2"+
		"\xAA\x3C8\x3\x2\x2\x2\xAC\x3CD\x3\x2\x2\x2\xAE\x3E3\x3\x2\x2\x2\xB0\x3E9"+
		"\x3\x2\x2\x2\xB2\x400\x3\x2\x2\x2\xB4\x40C\x3\x2\x2\x2\xB6\x40E\x3\x2"+
		"\x2\x2\xB8\x417\x3\x2\x2\x2\xBA\x427\x3\x2\x2\x2\xBC\x435\x3\x2\x2\x2"+
		"\xBE\x437\x3\x2\x2\x2\xC0\x450\x3\x2\x2\x2\xC2\x452\x3\x2\x2\x2\xC4\x45C"+
		"\x3\x2\x2\x2\xC6\x46F\x3\x2\x2\x2\xC8\x475\x3\x2\x2\x2\xCA\x481\x3\x2"+
		"\x2\x2\xCC\x490\x3\x2\x2\x2\xCE\x492\x3\x2\x2\x2\xD0\x49F\x3\x2\x2\x2"+
		"\xD2\x4A1\x3\x2\x2\x2\xD4\x4A3\x3\x2\x2\x2\xD6\x4AB\x3\x2\x2\x2\xD8\x4AD"+
		"\x3\x2\x2\x2\xDA\x4B5\x3\x2\x2\x2\xDC\x4BD\x3\x2\x2\x2\xDE\x4C5\x3\x2"+
		"\x2\x2\xE0\x4CD\x3\x2\x2\x2\xE2\x4D5\x3\x2\x2\x2\xE4\x4DD\x3\x2\x2\x2"+
		"\xE6\x4E5\x3\x2\x2\x2\xE8\x4ED\x3\x2\x2\x2\xEA\x4F5\x3\x2\x2\x2\xEC\x503"+
		"\x3\x2\x2\x2\xEE\x515\x3\x2\x2\x2\xF0\x517\x3\x2\x2\x2\xF2\x519\x3\x2"+
		"\x2\x2\xF4\x52E\x3\x2\x2\x2\xF6\x536\x3\x2\x2\x2\xF8\x538\x3\x2\x2\x2"+
		"\xFA\xFC\x5\x4\x3\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFB\x3"+
		"\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\a\x2\x2\x3"+
		"\x100\x3\x3\x2\x2\x2\x101\x10E\a\x8B\x2\x2\x102\x10E\a\x8C\x2\x2\x103"+
		"\x10E\x5\x6\x4\x2\x104\x10E\x5\x84\x43\x2\x105\x10E\x5\x86\x44\x2\x106"+
		"\x10E\x5\b\x5\x2\x107\x10E\x5\f\a\x2\x108\x10E\x5\n\x6\x2\x109\x10E\x5"+
		"\xE\b\x2\x10A\x10E\x5\x10\t\x2\x10B\x10E\x5\x12\n\x2\x10C\x10E\x5\x14"+
		"\v\x2\x10D\x101\x3\x2\x2\x2\x10D\x102\x3\x2\x2\x2\x10D\x103\x3\x2\x2\x2"+
		"\x10D\x104\x3\x2\x2\x2\x10D\x105\x3\x2\x2\x2\x10D\x106\x3\x2\x2\x2\x10D"+
		"\x107\x3\x2\x2\x2\x10D\x108\x3\x2\x2\x2\x10D\x109\x3\x2\x2\x2\x10D\x10A"+
		"\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10C\x3\x2\x2\x2\x10E\x5\x3\x2"+
		"\x2\x2\x10F\x110\t\x2\x2\x2\x110\a\x3\x2\x2\x2\x111\x112\a\v\x2\x2\x112"+
		"\x115\x5$\x13\x2\x113\x114\aX\x2\x2\x114\x116\x5&\x14\x2\x115\x113\x3"+
		"\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\x3\x2\x2\x2\x117\x119\x5\x18"+
		"\r\x2\x118\x117\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x11B\x3\x2\x2\x2"+
		"\x11A\x11C\x5,\x17\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C"+
		"\x11E\x3\x2\x2\x2\x11D\x11F\x5\x30\x19\x2\x11E\x11D\x3\x2\x2\x2\x11E\x11F"+
		"\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a\b\x2\x2\x121\t\x3\x2\x2"+
		"\x2\x122\x123\a\v\x2\x2\x123\x124\x5$\x13\x2\x124\x126\aG\x2\x2\x125\x127"+
		"\x5(\x15\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128\x3\x2"+
		"\x2\x2\x128\x12A\aH\x2\x2\x129\x12B\x5\x18\r\x2\x12A\x129\x3\x2\x2\x2"+
		"\x12A\x12B\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12E\x5,\x17\x2\x12D"+
		"\x12C\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x130\x3\x2\x2\x2\x12F\x131"+
		"\x5\x30\x19\x2\x130\x12F\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x132\x3"+
		"\x2\x2\x2\x132\x133\a\b\x2\x2\x133\v\x3\x2\x2\x2\x134\x135\a\n\x2\x2\x135"+
		"\x138\x5$\x13\x2\x136\x137\aX\x2\x2\x137\x139\x5&\x14\x2\x138\x136\x3"+
		"\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13B\x3\x2\x2\x2\x13A\x13C\x5,\x17"+
		"\x2\x13B\x13A\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E\x3\x2\x2\x2"+
		"\x13D\x13F\x5\x38\x1D\x2\x13E\x13D\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F"+
		"\x140\x3\x2\x2\x2\x140\x141\a\b\x2\x2\x141\r\x3\x2\x2\x2\x142\x143\a\n"+
		"\x2\x2\x143\x144\x5$\x13\x2\x144\x145\aG\x2\x2\x145\x146\x5(\x15\x2\x146"+
		"\x148\aH\x2\x2\x147\x149\x5\x38\x1D\x2\x148\x147\x3\x2\x2\x2\x148\x149"+
		"\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14B\a\b\x2\x2\x14B\xF\x3\x2\x2"+
		"\x2\x14C\x14D\a\r\x2\x2\x14D\x14F\x5*\x16\x2\x14E\x150\x5\x18\r\x2\x14F"+
		"\x14E\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x152\x3\x2\x2\x2\x151\x153"+
		"\x5\x30\x19\x2\x152\x151\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3"+
		"\x2\x2\x2\x154\x156\a\xE\x2\x2\x155\x154\x3\x2\x2\x2\x155\x156\x3\x2\x2"+
		"\x2\x156\x158\x3\x2\x2\x2\x157\x159\x5\x30\x19\x2\x158\x157\x3\x2\x2\x2"+
		"\x158\x159\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A\x15B\a\b\x2\x2\x15B"+
		"\x11\x3\x2\x2\x2\x15C\x15D\a\r\x2\x2\x15D\x15E\x5\x1A\xE\x2\x15E\x15F"+
		"\aM\x2\x2\x15F\x13\x3\x2\x2\x2\x160\x161\a\x5\x2\x2\x161\x162\x5\x16\f"+
		"\x2\x162\x163\aM\x2\x2\x163\x15\x3\x2\x2\x2\x164\x169\x5$\x13\x2\x165"+
		"\x166\aN\x2\x2\x166\x168\x5$\x13\x2\x167\x165\x3\x2\x2\x2\x168\x16B\x3"+
		"\x2\x2\x2\x169\x167\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x17\x3\x2\x2"+
		"\x2\x16B\x169\x3\x2\x2\x2\x16C\x16D\aT\x2\x2\x16D\x16E\x5\x1A\xE\x2\x16E"+
		"\x16F\aS\x2\x2\x16F\x19\x3\x2\x2\x2\x170\x175\x5*\x16\x2\x171\x172\aN"+
		"\x2\x2\x172\x174\x5*\x16\x2\x173\x171\x3\x2\x2\x2\x174\x177\x3\x2\x2\x2"+
		"\x175\x173\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x1B\x3\x2\x2\x2\x177"+
		"\x175\x3\x2\x2\x2\x178\x17A\a\x10\x2\x2\x179\x17B\x5\x1E\x10\x2\x17A\x179"+
		"\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17D\x5"+
		"\x94K\x2\x17D\x1D\x3\x2\x2\x2\x17E\x17F\aG\x2\x2\x17F\x180\x5 \x11\x2"+
		"\x180\x181\aH\x2\x2\x181\x1F\x3\x2\x2\x2\x182\x187\x5\"\x12\x2\x183\x184"+
		"\aN\x2\x2\x184\x186\x5\"\x12\x2\x185\x183\x3\x2\x2\x2\x186\x189\x3\x2"+
		"\x2\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188!\x3\x2\x2\x2\x189"+
		"\x187\x3\x2\x2\x2\x18A\x19B\ax\x2\x2\x18B\x19B\av\x2\x2\x18C\x19B\a~\x2"+
		"\x2\x18D\x19B\az\x2\x2\x18E\x19B\a{\x2\x2\x18F\x19B\a|\x2\x2\x190\x19B"+
		"\a}\x2\x2\x191\x19B\x3\x2\x2\x2\x192\x193\aw\x2\x2\x193\x194\aR\x2\x2"+
		"\x194\x19B\a\x7F\x2\x2\x195\x196\ay\x2\x2\x196\x197\aR\x2\x2\x197\x198"+
		"\a\x7F\x2\x2\x198\x19B\aX\x2\x2\x199\x19B\a\x7F\x2\x2\x19A\x18A\x3\x2"+
		"\x2\x2\x19A\x18B\x3\x2\x2\x2\x19A\x18C\x3\x2\x2\x2\x19A\x18D\x3\x2\x2"+
		"\x2\x19A\x18E\x3\x2\x2\x2\x19A\x18F\x3\x2\x2\x2\x19A\x190\x3\x2\x2\x2"+
		"\x19A\x191\x3\x2\x2\x2\x19A\x192\x3\x2\x2\x2\x19A\x195\x3\x2\x2\x2\x19A"+
		"\x199\x3\x2\x2\x2\x19B#\x3\x2\x2\x2\x19C\x19D\a\x7F\x2\x2\x19D%\x3\x2"+
		"\x2\x2\x19E\x19F\a\x7F\x2\x2\x19F\'\x3\x2\x2\x2\x1A0\x1A1\a\x7F\x2\x2"+
		"\x1A1)\x3\x2\x2\x2\x1A2\x1A3\a\x7F\x2\x2\x1A3+\x3\x2\x2\x2\x1A4\x1A8\a"+
		"I\x2\x2\x1A5\x1A7\x5\x94K\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7\x1AA\x3\x2\x2"+
		"\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AB\x3\x2\x2\x2"+
		"\x1AA\x1A8\x3\x2\x2\x2\x1AB\x1C9\aJ\x2\x2\x1AC\x1AD\aI\x2\x2\x1AD\x1AF"+
		"\x5.\x18\x2\x1AE\x1B0\x5\x94K\x2\x1AF\x1AE\x3\x2\x2\x2\x1B0\x1B1\x3\x2"+
		"\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2"+
		"\x2\x1B3\x1B4\aJ\x2\x2\x1B4\x1C9\x3\x2\x2\x2\x1B5\x1B7\aI\x2\x2\x1B6\x1B8"+
		"\x5\x94K\x2\x1B7\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1B7\x3\x2"+
		"\x2\x2\x1B9\x1BA\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BC\x5,\x17\x2"+
		"\x1BC\x1BD\aJ\x2\x2\x1BD\x1C9\x3\x2\x2\x2\x1BE\x1BF\aI\x2\x2\x1BF\x1C1"+
		"\x5.\x18\x2\x1C0\x1C2\x5\x94K\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2"+
		"\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2"+
		"\x2\x1C5\x1C6\x5,\x17\x2\x1C6\x1C7\aJ\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8"+
		"\x1A4\x3\x2\x2\x2\x1C8\x1AC\x3\x2\x2\x2\x1C8\x1B5\x3\x2\x2\x2\x1C8\x1BE"+
		"\x3\x2\x2\x2\x1C9-\x3\x2\x2\x2\x1CA\x1CB\t\x3\x2\x2\x1CB/\x3\x2\x2\x2"+
		"\x1CC\x1D1\x5\x86\x44\x2\x1CD\x1D1\x5\x32\x1A\x2\x1CE\x1D1\x5\x34\x1B"+
		"\x2\x1CF\x1D1\x5\x1C\xF\x2\x1D0\x1CC\x3\x2\x2\x2\x1D0\x1CD\x3\x2\x2\x2"+
		"\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2"+
		"\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x31\x3\x2\x2\x2\x1D4\x1D5"+
		"\a\x61\x2\x2\x1D5\x1D6\x5\x36\x1C\x2\x1D6\x33\x3\x2\x2\x2\x1D7\x1D8\a"+
		"\x62\x2\x2\x1D8\x1D9\x5\x36\x1C\x2\x1D9\x35\x3\x2\x2\x2\x1DA\x1DC\x5\x46"+
		"$\x2\x1DB\x1DA\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2"+
		"\x1DD\x1DE\x5@!\x2\x1DE\x1DF\aM\x2\x2\x1DF\x37\x3\x2\x2\x2\x1E0\x1E6\x5"+
		"\x84\x43\x2\x1E1\x1E6\x5\x86\x44\x2\x1E2\x1E6\x5:\x1E\x2\x1E3\x1E6\x5"+
		"<\x1F\x2\x1E4\x1E6\x5H%\x2\x1E5\x1E0\x3\x2\x2\x2\x1E5\x1E1\x3\x2\x2\x2"+
		"\x1E5\x1E2\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E6"+
		"\x1E7\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x39"+
		"\x3\x2\x2\x2\x1E9\x1EA\a\x61\x2\x2\x1EA\x1EB\x5> \x2\x1EB;\x3\x2\x2\x2"+
		"\x1EC\x1ED\a\x62\x2\x2\x1ED\x1EE\x5> \x2\x1EE=\x3\x2\x2\x2\x1EF\x1F1\x5"+
		"\x46$\x2\x1F0\x1EF\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2"+
		"\x2\x1F2\x1F4\x5@!\x2\x1F3\x1F5\x5\x8EH\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4"+
		"\x1F5\x3\x2\x2\x2\x1F5\x1F7\x3\x2\x2\x2\x1F6\x1F8\aM\x2\x2\x1F7\x1F6\x3"+
		"\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FA\x5\xBE"+
		"`\x2\x1FA?\x3\x2\x2\x2\x1FB\x205\x5\x44#\x2\x1FC\x1FE\x5\x42\"\x2\x1FD"+
		"\x1FC\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x1FF\x200"+
		"\x3\x2\x2\x2\x200\x202\x3\x2\x2\x2\x201\x203\x5\xAAV\x2\x202\x201\x3\x2"+
		"\x2\x2\x202\x203\x3\x2\x2\x2\x203\x205\x3\x2\x2\x2\x204\x1FB\x3\x2\x2"+
		"\x2\x204\x1FD\x3\x2\x2\x2\x205\x41\x3\x2\x2\x2\x206\x208\x5\x44#\x2\x207"+
		"\x206\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20D"+
		"\aX\x2\x2\x20A\x20C\x5\x46$\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20F\x3\x2\x2"+
		"\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x210\x3\x2\x2\x2"+
		"\x20F\x20D\x3\x2\x2\x2\x210\x211\a\x7F\x2\x2\x211\x43\x3\x2\x2\x2\x212"+
		"\x213\a\x7F\x2\x2\x213\x45\x3\x2\x2\x2\x214\x215\aG\x2\x2\x215\x216\x5"+
		"\xB0Y\x2\x216\x217\aH\x2\x2\x217G\x3\x2\x2\x2\x218\x219\a\x15\x2\x2\x219"+
		"\x21A\x5J&\x2\x21A\x21B\aM\x2\x2\x21B\x221\x3\x2\x2\x2\x21C\x21D\a\x6"+
		"\x2\x2\x21D\x21E\x5J&\x2\x21E\x21F\aM\x2\x2\x21F\x221\x3\x2\x2\x2\x220"+
		"\x218\x3\x2\x2\x2\x220\x21C\x3\x2\x2\x2\x221I\x3\x2\x2\x2\x222\x227\x5"+
		"L\'\x2\x223\x224\aN\x2\x2\x224\x226\x5L\'\x2\x225\x223\x3\x2\x2\x2\x226"+
		"\x229\x3\x2\x2\x2\x227\x225\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228K\x3"+
		"\x2\x2\x2\x229\x227\x3\x2\x2\x2\x22A\x22F\a\x7F\x2\x2\x22B\x22C\a\x7F"+
		"\x2\x2\x22C\x22D\aR\x2\x2\x22D\x22F\a\x7F\x2\x2\x22E\x22A\x3\x2\x2\x2"+
		"\x22E\x22B\x3\x2\x2\x2\x22FM\x3\x2\x2\x2\x230\x231\x5P)\x2\x231\x232\a"+
		"G\x2\x2\x232\x234\ag\x2\x2\x233\x235\x5P)\x2\x234\x233\x3\x2\x2\x2\x234"+
		"\x235\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236\x238\aH\x2\x2\x237\x239\x5"+
		"`\x31\x2\x238\x237\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239O\x3\x2\x2\x2"+
		"\x23A\x251\a@\x2\x2\x23B\x251\a!\x2\x2\x23C\x251\a\x37\x2\x2\x23D\x251"+
		"\a\x31\x2\x2\x23E\x251\a\x32\x2\x2\x23F\x251\a*\x2\x2\x240\x251\a&\x2"+
		"\x2\x241\x251\a\x38\x2\x2\x242\x251\a?\x2\x2\x243\x245\a,\x2\x2\x244\x246"+
		"\x5\x18\r\x2\x245\x244\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x251\x3"+
		"\x2\x2\x2\x247\x249\x5$\x13\x2\x248\x24A\x5\x18\r\x2\x249\x248\x3\x2\x2"+
		"\x2\x249\x24A\x3\x2\x2\x2\x24A\x251\x3\x2\x2\x2\x24B\x251\x5\x92J\x2\x24C"+
		"\x251\x5\x9CO\x2\x24D\x24E\a\x7F\x2\x2\x24E\x251\x5\xA2R\x2\x24F\x251"+
		"\a\x7F\x2\x2\x250\x23A\x3\x2\x2\x2\x250\x23B\x3\x2\x2\x2\x250\x23C\x3"+
		"\x2\x2\x2\x250\x23D\x3\x2\x2\x2\x250\x23E\x3\x2\x2\x2\x250\x23F\x3\x2"+
		"\x2\x2\x250\x240\x3\x2\x2\x2\x250\x241\x3\x2\x2\x2\x250\x242\x3\x2\x2"+
		"\x2\x250\x243\x3\x2\x2\x2\x250\x247\x3\x2\x2\x2\x250\x24B\x3\x2\x2\x2"+
		"\x250\x24C\x3\x2\x2\x2\x250\x24D\x3\x2\x2\x2\x250\x24F\x3\x2\x2\x2\x251"+
		"Q\x3\x2\x2\x2\x252\x256\a\"\x2\x2\x253\x256\a\x41\x2\x2\x254\x256\x5T"+
		"+\x2\x255\x252\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x255\x254\x3\x2\x2\x2"+
		"\x256S\x3\x2\x2\x2\x257\x258\t\x4\x2\x2\x258U\x3\x2\x2\x2\x259\x26B\a"+
		"\x7F\x2\x2\x25A\x26B\x5\xF8}\x2\x25B\x26B\a\x81\x2\x2\x25C\x25D\aG\x2"+
		"\x2\x25D\x25E\x5\xCEh\x2\x25E\x25F\aH\x2\x2\x25F\x26B\x3\x2\x2\x2\x260"+
		"\x26B\a\x19\x2\x2\x261\x26B\a\x18\x2\x2\x262\x26B\x5\x64\x33\x2\x263\x26B"+
		"\x5l\x37\x2\x264\x26B\x5p\x39\x2\x265\x26B\x5r:\x2\x266\x26B\x5Z.\x2\x267"+
		"\x26B\x5\\/\x2\x268\x26B\x5^\x30\x2\x269\x26B\x5\x62\x32\x2\x26A\x259"+
		"\x3\x2\x2\x2\x26A\x25A\x3\x2\x2\x2\x26A\x25B\x3\x2\x2\x2\x26A\x25C\x3"+
		"\x2\x2\x2\x26A\x260\x3\x2\x2\x2\x26A\x261\x3\x2\x2\x2\x26A\x262\x3\x2"+
		"\x2\x2\x26A\x263\x3\x2\x2\x2\x26A\x264\x3\x2\x2\x2\x26A\x265\x3\x2\x2"+
		"\x2\x26A\x266\x3\x2\x2\x2\x26A\x267\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2"+
		"\x26A\x269\x3\x2\x2\x2\x26BW\x3\x2\x2\x2\x26C\x26D\x5\xF2z\x2\x26D\x26E"+
		"\aX\x2\x2\x26E\x26F\x5\xF2z\x2\x26FY\x3\x2\x2\x2\x270\x271\aQ\x2\x2\x271"+
		"\x273\aI\x2\x2\x272\x274\x5X-\x2\x273\x272\x3\x2\x2\x2\x273\x274\x3\x2"+
		"\x2\x2\x274\x279\x3\x2\x2\x2\x275\x276\aN\x2\x2\x276\x278\x5X-\x2\x277"+
		"\x275\x3\x2\x2\x2\x278\x27B\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x279\x27A"+
		"\x3\x2\x2\x2\x27A\x27D\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27C\x27E\aN"+
		"\x2\x2\x27D\x27C\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x27F\x3\x2\x2"+
		"\x2\x27F\x280\aJ\x2\x2\x280[\x3\x2\x2\x2\x281\x282\aQ\x2\x2\x282\x284"+
		"\aK\x2\x2\x283\x285\x5\xF2z\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2"+
		"\x2\x285\x28A\x3\x2\x2\x2\x286\x287\aN\x2\x2\x287\x289\x5\xF2z\x2\x288"+
		"\x286\x3\x2\x2\x2\x289\x28C\x3\x2\x2\x2\x28A\x288\x3\x2\x2\x2\x28A\x28B"+
		"\x3\x2\x2\x2\x28B\x28E\x3\x2\x2\x2\x28C\x28A\x3\x2\x2\x2\x28D\x28F\aN"+
		"\x2\x2\x28E\x28D\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x290\x3\x2\x2"+
		"\x2\x290\x291\aL\x2\x2\x291]\x3\x2\x2\x2\x292\x293\aQ\x2\x2\x293\x294"+
		"\aG\x2\x2\x294\x295\x5\xF2z\x2\x295\x296\aH\x2\x2\x296\x29A\x3\x2\x2\x2"+
		"\x297\x298\aQ\x2\x2\x298\x29A\x5\xF8}\x2\x299\x292\x3\x2\x2\x2\x299\x297"+
		"\x3\x2\x2\x2\x29A_\x3\x2\x2\x2\x29B\x29E\aG\x2\x2\x29C\x29F\x5t;\x2\x29D"+
		"\x29F\a@\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29D\x3\x2\x2\x2\x29E\x29F\x3"+
		"\x2\x2\x2\x29F\x2A4\x3\x2\x2\x2\x2A0\x2A1\aN\x2\x2\x2A1\x2A3\x5t;\x2\x2A2"+
		"\x2A0\x3\x2\x2\x2\x2A3\x2A6\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A5"+
		"\x3\x2\x2\x2\x2A5\x2A7\x3\x2\x2\x2\x2A6\x2A4\x3\x2\x2\x2\x2A7\x2A8\aH"+
		"\x2\x2\x2A8\x61\x3\x2\x2\x2\x2A9\x2AB\ag\x2\x2\x2AA\x2AC\x5P)\x2\x2AB"+
		"\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AE\x3\x2\x2\x2\x2AD\x2AF"+
		"\x5`\x31\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B0\x3\x2"+
		"\x2\x2\x2B0\x2B1\x5\xBE`\x2\x2B1\x63\x3\x2\x2\x2\x2B2\x2B3\aK\x2\x2\x2B3"+
		"\x2B4\x5\x66\x34\x2\x2B4\x2B5\x5h\x35\x2\x2B5\x2B6\aL\x2\x2\x2B6\x65\x3"+
		"\x2\x2\x2\x2B7\x2BB\x5\xCEh\x2\x2B8\x2BB\x5$\x13\x2\x2B9\x2BB\a\x18\x2"+
		"\x2\x2BA\x2B7\x3\x2\x2\x2\x2BA\x2B8\x3\x2\x2\x2\x2BA\x2B9\x3\x2\x2\x2"+
		"\x2BBg\x3\x2\x2\x2\x2BC\x2C3\x5\x44#\x2\x2BD\x2BF\x5j\x36\x2\x2BE\x2BD"+
		"\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2\x2\x2C0\x2C1\x3"+
		"\x2\x2\x2\x2C1\x2C3\x3\x2\x2\x2\x2C2\x2BC\x3\x2\x2\x2\x2C2\x2BE\x3\x2"+
		"\x2\x2\x2C3i\x3\x2\x2\x2\x2C4\x2C6\x5\x44#\x2\x2C5\x2C4\x3\x2\x2\x2\x2C5"+
		"\x2C6\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8\aX\x2\x2\x2C8\x2C9\x5"+
		"\xCEh\x2\x2C9k\x3\x2\x2\x2\x2CA\x2CB\a\x13\x2\x2\x2CB\x2CC\aG\x2\x2\x2CC"+
		"\x2CD\x5n\x38\x2\x2CD\x2CE\aH\x2\x2\x2CEm\x3\x2\x2\x2\x2CF\x2D9\x5\x44"+
		"#\x2\x2D0\x2D2\x5\x44#\x2\x2D1\x2D0\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2"+
		"\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D5\aX\x2\x2\x2D4\x2D1\x3\x2\x2\x2\x2D5\x2D6"+
		"\x3\x2\x2\x2\x2D6\x2D4\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D9\x3"+
		"\x2\x2\x2\x2D8\x2CF\x3\x2\x2\x2\x2D8\x2D4\x3\x2\x2\x2\x2D9o\x3\x2\x2\x2"+
		"\x2DA\x2DB\a\r\x2\x2\x2DB\x2DC\aG\x2\x2\x2DC\x2DD\x5*\x16\x2\x2DD\x2DE"+
		"\aH\x2\x2\x2DEq\x3\x2\x2\x2\x2DF\x2E0\a\a\x2\x2\x2E0\x2E1\aG\x2\x2\x2E1"+
		"\x2E2\x5\xB0Y\x2\x2E2\x2E3\aH\x2\x2\x2E3s\x3\x2\x2\x2\x2E4\x2E6\x5\x88"+
		"\x45\x2\x2E5\x2E7\x5\xA4S\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2"+
		"\x2\x2E7u\x3\x2\x2\x2\x2E8\x2E9\a\x17\x2\x2\x2E9\x2EA\x5\xBE`\x2\x2EA"+
		"w\x3\x2\x2\x2\x2EB\x2EC\a\x4\x2\x2\x2EC\x2ED\aG\x2\x2\x2ED\x2EE\x5t;\x2"+
		"\x2EE\x2EF\aH\x2\x2\x2EF\x2F0\x5\xBE`\x2\x2F0y\x3\x2\x2\x2\x2F1\x2F2\a"+
		"\t\x2\x2\x2F2\x2F3\x5\xBE`\x2\x2F3{\x3\x2\x2\x2\x2F4\x2F5\a\x16\x2\x2"+
		"\x2F5\x2F6\aG\x2\x2\x2F6\x2F7\a\x7F\x2\x2\x2F7\x2F8\aH\x2\x2\x2F8}\x3"+
		"\x2\x2\x2\x2F9\x2FD\x5v<\x2\x2FA\x2FC\x5x=\x2\x2FB\x2FA\x3\x2\x2\x2\x2FC"+
		"\x2FF\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x301"+
		"\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x300\x302\x5z>\x2\x301\x300\x3\x2\x2"+
		"\x2\x301\x302\x3\x2\x2\x2\x302\x7F\x3\x2\x2\x2\x303\x304\a\x14\x2\x2\x304"+
		"\x305\aG\x2\x2\x305\x306\x5V,\x2\x306\x307\aH\x2\x2\x307\x308\x5\xBE`"+
		"\x2\x308\x81\x3\x2\x2\x2\x309\x30A\a\x3\x2\x2\x30A\x30B\x5\xBE`\x2\x30B"+
		"\x83\x3\x2\x2\x2\x30C\x30E\x5\x88\x45\x2\x30D\x30C\x3\x2\x2\x2\x30D\x30E"+
		"\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x310\x5\xA4S\x2\x310\x311\x5\xBE"+
		"`\x2\x311\x85\x3\x2\x2\x2\x312\x314\x5\x88\x45\x2\x313\x315\x5\x8EH\x2"+
		"\x314\x313\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x316\x3\x2\x2\x2\x316"+
		"\x317\aM\x2\x2\x317\x87\x3\x2\x2\x2\x318\x31D\x5\x8A\x46\x2\x319\x31D"+
		"\x5\x8CG\x2\x31A\x31D\x5P)\x2\x31B\x31D\x5R*\x2\x31C\x318\x3\x2\x2\x2"+
		"\x31C\x319\x3\x2\x2\x2\x31C\x31A\x3\x2\x2\x2\x31C\x31B\x3\x2\x2\x2\x31D"+
		"\x31E\x3\x2\x2\x2\x31E\x31C\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x89"+
		"\x3\x2\x2\x2\x320\x321\t\x5\x2\x2\x321\x8B\x3\x2\x2\x2\x322\x323\t\x6"+
		"\x2\x2\x323\x8D\x3\x2\x2\x2\x324\x329\x5\x90I\x2\x325\x326\aN\x2\x2\x326"+
		"\x328\x5\x90I\x2\x327\x325\x3\x2\x2\x2\x328\x32B\x3\x2\x2\x2\x329\x327"+
		"\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x8F\x3\x2\x2\x2\x32B\x329\x3\x2"+
		"\x2\x2\x32C\x32F\x5\xA4S\x2\x32D\x32E\aR\x2\x2\x32E\x330\x5\xAEX\x2\x32F"+
		"\x32D\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x91\x3\x2\x2\x2\x331\x33E"+
		"\t\a\x2\x2\x332\x33F\a\x7F\x2\x2\x333\x335\a\x7F\x2\x2\x334\x333\x3\x2"+
		"\x2\x2\x334\x335\x3\x2\x2\x2\x335\x336\x3\x2\x2\x2\x336\x338\aI\x2\x2"+
		"\x337\x339\x5\x94K\x2\x338\x337\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A"+
		"\x338\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33C\x3\x2\x2\x2\x33C\x33D"+
		"\aJ\x2\x2\x33D\x33F\x3\x2\x2\x2\x33E\x332\x3\x2\x2\x2\x33E\x334\x3\x2"+
		"\x2\x2\x33F\x93\x3\x2\x2\x2\x340\x341\x5\x96L\x2\x341\x342\x5\x98M\x2"+
		"\x342\x343\aM\x2\x2\x343\x95\x3\x2\x2\x2\x344\x348\x5\x8A\x46\x2\x345"+
		"\x348\x5P)\x2\x346\x348\x5R*\x2\x347\x344\x3\x2\x2\x2\x347\x345\x3\x2"+
		"\x2\x2\x347\x346\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x347\x3\x2\x2"+
		"\x2\x349\x34A\x3\x2\x2\x2\x34A\x97\x3\x2\x2\x2\x34B\x350\x5\x9AN\x2\x34C"+
		"\x34D\aN\x2\x2\x34D\x34F\x5\x9AN\x2\x34E\x34C\x3\x2\x2\x2\x34F\x352\x3"+
		"\x2\x2\x2\x350\x34E\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351\x99\x3\x2\x2"+
		"\x2\x352\x350\x3\x2\x2\x2\x353\x35A\x5\xA4S\x2\x354\x356\x5\xA4S\x2\x355"+
		"\x354\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x358"+
		"\aX\x2\x2\x358\x35A\x5\xF8}\x2\x359\x353\x3\x2\x2\x2\x359\x355\x3\x2\x2"+
		"\x2\x35A\x9B\x3\x2\x2\x2\x35B\x35E\a(\x2\x2\x35C\x35D\aX\x2\x2\x35D\x35F"+
		"\x5\xB0Y\x2\x35E\x35C\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x36B\x3\x2"+
		"\x2\x2\x360\x365\x5\xF6|\x2\x361\x362\aI\x2\x2\x362\x363\x5\x9EP\x2\x363"+
		"\x364\aJ\x2\x2\x364\x366\x3\x2\x2\x2\x365\x361\x3\x2\x2\x2\x365\x366\x3"+
		"\x2\x2\x2\x366\x36C\x3\x2\x2\x2\x367\x368\aI\x2\x2\x368\x369\x5\x9EP\x2"+
		"\x369\x36A\aJ\x2\x2\x36A\x36C\x3\x2\x2\x2\x36B\x360\x3\x2\x2\x2\x36B\x367"+
		"\x3\x2\x2\x2\x36C\x382\x3\x2\x2\x2\x36D\x36E\a\x43\x2\x2\x36E\x36F\aG"+
		"\x2\x2\x36F\x370\x5\xB0Y\x2\x370\x371\aN\x2\x2\x371\x372\x5\xF6|\x2\x372"+
		"\x373\aH\x2\x2\x373\x374\aI\x2\x2\x374\x375\x5\x9EP\x2\x375\x376\aJ\x2"+
		"\x2\x376\x382\x3\x2\x2\x2\x377\x378\a\x44\x2\x2\x378\x379\aG\x2\x2\x379"+
		"\x37A\x5\xB0Y\x2\x37A\x37B\aN\x2\x2\x37B\x37C\x5\xF6|\x2\x37C\x37D\aH"+
		"\x2\x2\x37D\x37E\aI\x2\x2\x37E\x37F\x5\x9EP\x2\x37F\x380\aJ\x2\x2\x380"+
		"\x382\x3\x2\x2\x2\x381\x35B\x3\x2\x2\x2\x381\x36D\x3\x2\x2\x2\x381\x377"+
		"\x3\x2\x2\x2\x382\x9D\x3\x2\x2\x2\x383\x388\x5\xA0Q\x2\x384\x385\aN\x2"+
		"\x2\x385\x387\x5\xA0Q\x2\x386\x384\x3\x2\x2\x2\x387\x38A\x3\x2\x2\x2\x388"+
		"\x386\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38C\x3\x2\x2\x2\x38A\x388"+
		"\x3\x2\x2\x2\x38B\x38D\aN\x2\x2\x38C\x38B\x3\x2\x2\x2\x38C\x38D\x3\x2"+
		"\x2\x2\x38D\x9F\x3\x2\x2\x2\x38E\x391\x5\xF6|\x2\x38F\x390\aR\x2\x2\x390"+
		"\x392\x5\xD6l\x2\x391\x38F\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\xA1"+
		"\x3\x2\x2\x2\x393\x395\a\x63\x2\x2\x394\x396\x5\x88\x45\x2\x395\x394\x3"+
		"\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x39D\x3\x2\x2\x2\x397\x399\a\x63"+
		"\x2\x2\x398\x39A\x5\x88\x45\x2\x399\x398\x3\x2\x2\x2\x399\x39A\x3\x2\x2"+
		"\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39D\x5\xA2R\x2\x39C\x393\x3\x2\x2\x2\x39C"+
		"\x397\x3\x2\x2\x2\x39D\xA3\x3\x2\x2\x2\x39E\x3A0\x5\xA2R\x2\x39F\x39E"+
		"\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A2\x5"+
		"\xA6T\x2\x3A2\xA5\x3\x2\x2\x2\x3A3\x3A7\x5\xF6|\x2\x3A4\x3A6\x5\xA8U\x2"+
		"\x3A5\x3A4\x3\x2\x2\x2\x3A6\x3A9\x3\x2\x2\x2\x3A7\x3A5\x3\x2\x2\x2\x3A7"+
		"\x3A8\x3\x2\x2\x2\x3A8\x3BB\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3AA\x3AB"+
		"\aG\x2\x2\x3AB\x3AC\x5\xA4S\x2\x3AC\x3B0\aH\x2\x2\x3AD\x3AF\x5\xA8U\x2"+
		"\x3AE\x3AD\x3\x2\x2\x2\x3AF\x3B2\x3\x2\x2\x2\x3B0\x3AE\x3\x2\x2\x2\x3B0"+
		"\x3B1\x3\x2\x2\x2\x3B1\x3BB\x3\x2\x2\x2\x3B2\x3B0\x3\x2\x2\x2\x3B3\x3B4"+
		"\aG\x2\x2\x3B4\x3B6\ag\x2\x2\x3B5\x3B7\x5\xF6|\x2\x3B6\x3B5\x3\x2\x2\x2"+
		"\x3B6\x3B7\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3B9\aH\x2\x2\x3B9\x3BB"+
		"\x5`\x31\x2\x3BA\x3A3\x3\x2\x2\x2\x3BA\x3AA\x3\x2\x2\x2\x3BA\x3B3\x3\x2"+
		"\x2\x2\x3BB\xA7\x3\x2\x2\x2\x3BC\x3BE\aK\x2\x2\x3BD\x3BF\x5\xD6l\x2\x3BE"+
		"\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C7"+
		"\aL\x2\x2\x3C1\x3C3\aG\x2\x2\x3C2\x3C4\x5\xAAV\x2\x3C3\x3C2\x3\x2\x2\x2"+
		"\x3C3\x3C4\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C7\aH\x2\x2\x3C6\x3BC"+
		"\x3\x2\x2\x2\x3C6\x3C1\x3\x2\x2\x2\x3C7\xA9\x3\x2\x2\x2\x3C8\x3CB\x5\xB6"+
		"\\\x2\x3C9\x3CA\aN\x2\x2\x3CA\x3CC\au\x2\x2\x3CB\x3C9\x3\x2\x2\x2\x3CB"+
		"\x3CC\x3\x2\x2\x2\x3CC\xAB\x3\x2\x2\x2\x3CD\x3D2\x5\x88\x45\x2\x3CE\x3D0"+
		"\x5\xA4S\x2\x3CF\x3CE\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0\x3D3\x3\x2"+
		"\x2\x2\x3D1\x3D3\x5\xB2Z\x2\x3D2\x3CF\x3\x2\x2\x2\x3D2\x3D1\x3\x2\x2\x2"+
		"\x3D3\xAD\x3\x2\x2\x2\x3D4\x3E4\x5\xD0i\x2\x3D5\x3D6\aI\x2\x2\x3D6\x3DB"+
		"\x5\xAEX\x2\x3D7\x3D8\aN\x2\x2\x3D8\x3DA\x5\xAEX\x2\x3D9\x3D7\x3\x2\x2"+
		"\x2\x3DA\x3DD\x3\x2\x2\x2\x3DB\x3D9\x3\x2\x2\x2\x3DB\x3DC\x3\x2\x2\x2"+
		"\x3DC\x3DF\x3\x2\x2\x2\x3DD\x3DB\x3\x2\x2\x2\x3DE\x3E0\aN\x2\x2\x3DF\x3DE"+
		"\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E1\x3\x2\x2\x2\x3E1\x3E2\aJ"+
		"\x2\x2\x3E2\x3E4\x3\x2\x2\x2\x3E3\x3D4\x3\x2\x2\x2\x3E3\x3D5\x3\x2\x2"+
		"\x2\x3E4\xAF\x3\x2\x2\x2\x3E5\x3E6\x5\x96L\x2\x3E6\x3E7\x5\xB2Z\x2\x3E7"+
		"\x3EA\x3\x2\x2\x2\x3E8\x3EA\x5N(\x2\x3E9\x3E5\x3\x2\x2\x2\x3E9\x3E8\x3"+
		"\x2\x2\x2\x3EA\xB1\x3\x2\x2\x2\x3EB\x3EC\x5\xA2R\x2\x3EC\x3ED\x5\xB2Z"+
		"\x2\x3ED\x401\x3\x2\x2\x2\x3EE\x3EF\aG\x2\x2\x3EF\x3F0\x5\xB2Z\x2\x3F0"+
		"\x3F2\aH\x2\x2\x3F1\x3F3\x5\xB4[\x2\x3F2\x3F1\x3\x2\x2\x2\x3F3\x3F4\x3"+
		"\x2\x2\x2\x3F4\x3F2\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5\x401\x3\x2"+
		"\x2\x2\x3F6\x3F8\aK\x2\x2\x3F7\x3F9\x5\xD6l\x2\x3F8\x3F7\x3\x2\x2\x2\x3F8"+
		"\x3F9\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA\x3FC\aL\x2\x2\x3FB\x3F6\x3"+
		"\x2\x2\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\x3FB\x3\x2\x2\x2\x3FD\x3FE\x3\x2"+
		"\x2\x2\x3FE\x401\x3\x2\x2\x2\x3FF\x401\x3\x2\x2\x2\x400\x3EB\x3\x2\x2"+
		"\x2\x400\x3EE\x3\x2\x2\x2\x400\x3FB\x3\x2\x2\x2\x400\x3FF\x3\x2\x2\x2"+
		"\x401\xB3\x3\x2\x2\x2\x402\x404\aK\x2\x2\x403\x405\x5\xD6l\x2\x404\x403"+
		"\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x40D\aL"+
		"\x2\x2\x407\x409\aG\x2\x2\x408\x40A\x5\xB6\\\x2\x409\x408\x3\x2\x2\x2"+
		"\x409\x40A\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x40D\aH\x2\x2\x40C\x402"+
		"\x3\x2\x2\x2\x40C\x407\x3\x2\x2\x2\x40D\xB5\x3\x2\x2\x2\x40E\x413\x5\xAC"+
		"W\x2\x40F\x410\aN\x2\x2\x410\x412\x5\xACW\x2\x411\x40F\x3\x2\x2\x2\x412"+
		"\x415\x3\x2\x2\x2\x413\x411\x3\x2\x2\x2\x413\x414\x3\x2\x2\x2\x414\xB7"+
		"\x3\x2\x2\x2\x415\x413\x3\x2\x2\x2\x416\x418\x5\xBA^\x2\x417\x416\x3\x2"+
		"\x2\x2\x418\x419\x3\x2\x2\x2\x419\x417\x3\x2\x2\x2\x419\x41A\x3\x2\x2"+
		"\x2\x41A\xB9\x3\x2\x2\x2\x41B\x428\x5\xBC_\x2\x41C\x41D\x5\xCEh\x2\x41D"+
		"\x41E\aM\x2\x2\x41E\x428\x3\x2\x2\x2\x41F\x428\x5\xBE`\x2\x420\x428\x5"+
		"\xC0\x61\x2\x421\x428\x5\xCA\x66\x2\x422\x428\x5\xCCg\x2\x423\x428\x5"+
		"\x80\x41\x2\x424\x428\x5\x82\x42\x2\x425\x428\x5~@\x2\x426\x428\aM\x2"+
		"\x2\x427\x41B\x3\x2\x2\x2\x427\x41C\x3\x2\x2\x2\x427\x41F\x3\x2\x2\x2"+
		"\x427\x420\x3\x2\x2\x2\x427\x421\x3\x2\x2\x2\x427\x422\x3\x2\x2\x2\x427"+
		"\x423\x3\x2\x2\x2\x427\x424\x3\x2\x2\x2\x427\x425\x3\x2\x2\x2\x427\x426"+
		"\x3\x2\x2\x2\x428\xBB\x3\x2\x2\x2\x429\x42A\x5\xF6|\x2\x42A\x42B\aX\x2"+
		"\x2\x42B\x42C\x5\xBA^\x2\x42C\x436\x3\x2\x2\x2\x42D\x42E\a \x2\x2\x42E"+
		"\x42F\x5\xD6l\x2\x42F\x430\aX\x2\x2\x430\x431\x5\xBA^\x2\x431\x436\x3"+
		"\x2\x2\x2\x432\x433\a$\x2\x2\x433\x434\aX\x2\x2\x434\x436\x5\xBA^\x2\x435"+
		"\x429\x3\x2\x2\x2\x435\x42D\x3\x2\x2\x2\x435\x432\x3\x2\x2\x2\x436\xBD"+
		"\x3\x2\x2\x2\x437\x43C\aI\x2\x2\x438\x43B\x5\x86\x44\x2\x439\x43B\x5\xB8"+
		"]\x2\x43A\x438\x3\x2\x2\x2\x43A\x439\x3\x2\x2\x2\x43B\x43E\x3\x2\x2\x2"+
		"\x43C\x43A\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43F\x3\x2\x2\x2\x43E"+
		"\x43C\x3\x2\x2\x2\x43F\x440\aJ\x2\x2\x440\xBF\x3\x2\x2\x2\x441\x442\a"+
		"-\x2\x2\x442\x443\aG\x2\x2\x443\x444\x5\xCEh\x2\x444\x445\aH\x2\x2\x445"+
		"\x448\x5\xBA^\x2\x446\x447\a\'\x2\x2\x447\x449\x5\xBA^\x2\x448\x446\x3"+
		"\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x451\x3\x2\x2\x2\x44A\x44B\a<\x2"+
		"\x2\x44B\x44C\aG\x2\x2\x44C\x44D\x5\xCEh\x2\x44D\x44E\aH\x2\x2\x44E\x44F"+
		"\x5\xBA^\x2\x44F\x451\x3\x2\x2\x2\x450\x441\x3\x2\x2\x2\x450\x44A\x3\x2"+
		"\x2\x2\x451\xC1\x3\x2\x2\x2\x452\x453\a+\x2\x2\x453\x454\aG\x2\x2\x454"+
		"\x455\x5t;\x2\x455\x457\a.\x2\x2\x456\x458\x5\xCEh\x2\x457\x456\x3\x2"+
		"\x2\x2\x457\x458\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45A\aH\x2\x2"+
		"\x45A\x45B\x5\xBA^\x2\x45B\xC3\x3\x2\x2\x2\x45C\x45D\a+\x2\x2\x45D\x462"+
		"\aG\x2\x2\x45E\x45F\x5\x88\x45\x2\x45F\x460\x5\x8EH\x2\x460\x463\x3\x2"+
		"\x2\x2\x461\x463\x5\xCEh\x2\x462\x45E\x3\x2\x2\x2\x462\x461\x3\x2\x2\x2"+
		"\x462\x463\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x466\aM\x2\x2\x465\x467"+
		"\x5\xCEh\x2\x466\x465\x3\x2\x2\x2\x466\x467\x3\x2\x2\x2\x467\x468\x3\x2"+
		"\x2\x2\x468\x46A\aM\x2\x2\x469\x46B\x5\xCEh\x2\x46A\x469\x3\x2\x2\x2\x46A"+
		"\x46B\x3\x2\x2\x2\x46B\x46C\x3\x2\x2\x2\x46C\x46D\aH\x2\x2\x46D\x46E\x5"+
		"\xBA^\x2\x46E\xC5\x3\x2\x2\x2\x46F\x470\a\x42\x2\x2\x470\x471\aG\x2\x2"+
		"\x471\x472\x5\xCEh\x2\x472\x473\aH\x2\x2\x473\x474\x5\xBA^\x2\x474\xC7"+
		"\x3\x2\x2\x2\x475\x476\a%\x2\x2\x476\x477\x5\xBA^\x2\x477\x478\a\x42\x2"+
		"\x2\x478\x479\aG\x2\x2\x479\x47A\x5\xCEh\x2\x47A\x47B\aH\x2\x2\x47B\x47C"+
		"\aM\x2\x2\x47C\xC9\x3\x2\x2\x2\x47D\x482\x5\xC6\x64\x2\x47E\x482\x5\xC8"+
		"\x65\x2\x47F\x482\x5\xC4\x63\x2\x480\x482\x5\xC2\x62\x2\x481\x47D\x3\x2"+
		"\x2\x2\x481\x47E\x3\x2\x2\x2\x481\x47F\x3\x2\x2\x2\x481\x480\x3\x2\x2"+
		"\x2\x482\xCB\x3\x2\x2\x2\x483\x484\a\x30\x2\x2\x484\x485\x5\xF6|\x2\x485"+
		"\x486\aM\x2\x2\x486\x491\x3\x2\x2\x2\x487\x488\a#\x2\x2\x488\x491\aM\x2"+
		"\x2\x489\x48A\a\x1D\x2\x2\x48A\x491\aM\x2\x2\x48B\x48D\a\x36\x2\x2\x48C"+
		"\x48E\x5\xCEh\x2\x48D\x48C\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x48F"+
		"\x3\x2\x2\x2\x48F\x491\aM\x2\x2\x490\x483\x3\x2\x2\x2\x490\x487\x3\x2"+
		"\x2\x2\x490\x489\x3\x2\x2\x2\x490\x48B\x3\x2\x2\x2\x491\xCD\x3\x2\x2\x2"+
		"\x492\x497\x5\xD0i\x2\x493\x494\aN\x2\x2\x494\x496\x5\xD0i\x2\x495\x493"+
		"\x3\x2\x2\x2\x496\x499\x3\x2\x2\x2\x497\x495\x3\x2\x2\x2\x497\x498\x3"+
		"\x2\x2\x2\x498\xCF\x3\x2\x2\x2\x499\x497\x3\x2\x2\x2\x49A\x4A0\x5\xD4"+
		"k\x2\x49B\x49C\x5\xEEx\x2\x49C\x49D\x5\xD2j\x2\x49D\x49E\x5\xD0i\x2\x49E"+
		"\x4A0\x3\x2\x2\x2\x49F\x49A\x3\x2\x2\x2\x49F\x49B\x3\x2\x2\x2\x4A0\xD1"+
		"\x3\x2\x2\x2\x4A1\x4A2\t\b\x2\x2\x4A2\xD3\x3\x2\x2\x2\x4A3\x4A9\x5\xD8"+
		"m\x2\x4A4\x4A5\aW\x2\x2\x4A5\x4A6\x5\xD4k\x2\x4A6\x4A7\aX\x2\x2\x4A7\x4A8"+
		"\x5\xD4k\x2\x4A8\x4AA\x3\x2\x2\x2\x4A9\x4A4\x3\x2\x2\x2\x4A9\x4AA\x3\x2"+
		"\x2\x2\x4AA\xD5\x3\x2\x2\x2\x4AB\x4AC\x5\xD4k\x2\x4AC\xD7\x3\x2\x2\x2"+
		"\x4AD\x4B2\x5\xDAn\x2\x4AE\x4AF\a^\x2\x2\x4AF\x4B1\x5\xDAn\x2\x4B0\x4AE"+
		"\x3\x2\x2\x2\x4B1\x4B4\x3\x2\x2\x2\x4B2\x4B0\x3\x2\x2\x2\x4B2\x4B3\x3"+
		"\x2\x2\x2\x4B3\xD9\x3\x2\x2\x2\x4B4\x4B2\x3\x2\x2\x2\x4B5\x4BA\x5\xDC"+
		"o\x2\x4B6\x4B7\a]\x2\x2\x4B7\x4B9\x5\xDCo\x2\x4B8\x4B6\x3\x2\x2\x2\x4B9"+
		"\x4BC\x3\x2\x2\x2\x4BA\x4B8\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\xDB"+
		"\x3\x2\x2\x2\x4BC\x4BA\x3\x2\x2\x2\x4BD\x4C2\x5\xDEp\x2\x4BE\x4BF\a\x66"+
		"\x2\x2\x4BF\x4C1\x5\xDEp\x2\x4C0\x4BE\x3\x2\x2\x2\x4C1\x4C4\x3\x2\x2\x2"+
		"\x4C2\x4C0\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3\xDD\x3\x2\x2\x2\x4C4"+
		"\x4C2\x3\x2\x2\x2\x4C5\x4CA\x5\xE0q\x2\x4C6\x4C7\ag\x2\x2\x4C7\x4C9\x5"+
		"\xE0q\x2\x4C8\x4C6\x3\x2\x2\x2\x4C9\x4CC\x3\x2\x2\x2\x4CA\x4C8\x3\x2\x2"+
		"\x2\x4CA\x4CB\x3\x2\x2\x2\x4CB\xDF\x3\x2\x2\x2\x4CC\x4CA\x3\x2\x2\x2\x4CD"+
		"\x4D2\x5\xE2r\x2\x4CE\x4CF\a\x65\x2\x2\x4CF\x4D1\x5\xE2r\x2\x4D0\x4CE"+
		"\x3\x2\x2\x2\x4D1\x4D4\x3\x2\x2\x2\x4D2\x4D0\x3\x2\x2\x2\x4D2\x4D3\x3"+
		"\x2\x2\x2\x4D3\xE1\x3\x2\x2\x2\x4D4\x4D2\x3\x2\x2\x2\x4D5\x4DA\x5\xE4"+
		"s\x2\x4D6\x4D7\t\t\x2\x2\x4D7\x4D9\x5\xE4s\x2\x4D8\x4D6\x3\x2\x2\x2\x4D9"+
		"\x4DC\x3\x2\x2\x2\x4DA\x4D8\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\xE3"+
		"\x3\x2\x2\x2\x4DC\x4DA\x3\x2\x2\x2\x4DD\x4E2\x5\xE6t\x2\x4DE\x4DF\t\n"+
		"\x2\x2\x4DF\x4E1\x5\xE6t\x2\x4E0\x4DE\x3\x2\x2\x2\x4E1\x4E4\x3\x2\x2\x2"+
		"\x4E2\x4E0\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\xE5\x3\x2\x2\x2\x4E4"+
		"\x4E2\x3\x2\x2\x2\x4E5\x4EA\x5\xE8u\x2\x4E6\x4E7\t\v\x2\x2\x4E7\x4E9\x5"+
		"\xE8u\x2\x4E8\x4E6\x3\x2\x2\x2\x4E9\x4EC\x3\x2\x2\x2\x4EA\x4E8\x3\x2\x2"+
		"\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\xE7\x3\x2\x2\x2\x4EC\x4EA\x3\x2\x2\x2\x4ED"+
		"\x4F2\x5\xEAv\x2\x4EE\x4EF\t\f\x2\x2\x4EF\x4F1\x5\xEAv\x2\x4F0\x4EE\x3"+
		"\x2\x2\x2\x4F1\x4F4\x3\x2\x2\x2\x4F2\x4F0\x3\x2\x2\x2\x4F2\x4F3\x3\x2"+
		"\x2\x2\x4F3\xE9\x3\x2\x2\x2\x4F4\x4F2\x3\x2\x2\x2\x4F5\x4FA\x5\xECw\x2"+
		"\x4F6\x4F7\t\r\x2\x2\x4F7\x4F9\x5\xECw\x2\x4F8\x4F6\x3\x2\x2\x2\x4F9\x4FC"+
		"\x3\x2\x2\x2\x4FA\x4F8\x3\x2\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\xEB\x3\x2"+
		"\x2\x2\x4FC\x4FA\x3\x2\x2\x2\x4FD\x4FE\aG\x2\x2\x4FE\x4FF\x5\xB0Y\x2\x4FF"+
		"\x500\aH\x2\x2\x500\x501\x5\xECw\x2\x501\x504\x3\x2\x2\x2\x502\x504\x5"+
		"\xEEx\x2\x503\x4FD\x3\x2\x2\x2\x503\x502\x3\x2\x2\x2\x504\xED\x3\x2\x2"+
		"\x2\x505\x516\x5\xF2z\x2\x506\x507\a_\x2\x2\x507\x516\x5\xEEx\x2\x508"+
		"\x509\a`\x2\x2\x509\x516\x5\xEEx\x2\x50A\x50B\x5\xF0y\x2\x50B\x50C\x5"+
		"\xECw\x2\x50C\x516\x3\x2\x2\x2\x50D\x513\a\x39\x2\x2\x50E\x50F\aG\x2\x2"+
		"\x50F\x510\x5\xB0Y\x2\x510\x511\aH\x2\x2\x511\x514\x3\x2\x2\x2\x512\x514"+
		"\x5\xEEx\x2\x513\x50E\x3\x2\x2\x2\x513\x512\x3\x2\x2\x2\x514\x516\x3\x2"+
		"\x2\x2\x515\x505\x3\x2\x2\x2\x515\x506\x3\x2\x2\x2\x515\x508\x3\x2\x2"+
		"\x2\x515\x50A\x3\x2\x2\x2\x515\x50D\x3\x2\x2\x2\x516\xEF\x3\x2\x2\x2\x517"+
		"\x518\t\xE\x2\x2\x518\xF1\x3\x2\x2\x2\x519\x52B\x5V,\x2\x51A\x51B\aK\x2"+
		"\x2\x51B\x51C\x5\xCEh\x2\x51C\x51D\aL\x2\x2\x51D\x52A\x3\x2\x2\x2\x51E"+
		"\x520\aG\x2\x2\x51F\x521\x5\xF4{\x2\x520\x51F\x3\x2\x2\x2\x520\x521\x3"+
		"\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522\x52A\aH\x2\x2\x523\x524\aO\x2\x2"+
		"\x524\x52A\x5\xF6|\x2\x525\x526\aP\x2\x2\x526\x52A\x5\xF6|\x2\x527\x52A"+
		"\a_\x2\x2\x528\x52A\a`\x2\x2\x529\x51A\x3\x2\x2\x2\x529\x51E\x3\x2\x2"+
		"\x2\x529\x523\x3\x2\x2\x2\x529\x525\x3\x2\x2\x2\x529\x527\x3\x2\x2\x2"+
		"\x529\x528\x3\x2\x2\x2\x52A\x52D\x3\x2\x2\x2\x52B\x529\x3\x2\x2\x2\x52B"+
		"\x52C\x3\x2\x2\x2\x52C\xF3\x3\x2\x2\x2\x52D\x52B\x3\x2\x2\x2\x52E\x533"+
		"\x5\xD0i\x2\x52F\x530\aN\x2\x2\x530\x532\x5\xD0i\x2\x531\x52F\x3\x2\x2"+
		"\x2\x532\x535\x3\x2\x2\x2\x533\x531\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2"+
		"\x534\xF5\x3\x2\x2\x2\x535\x533\x3\x2\x2\x2\x536\x537\a\x7F\x2\x2\x537"+
		"\xF7\x3\x2\x2\x2\x538\x539\t\xF\x2\x2\x539\xF9\x3\x2\x2\x2\x9B\xFD\x10D"+
		"\x115\x118\x11B\x11E\x126\x12A\x12D\x130\x138\x13B\x13E\x148\x14F\x152"+
		"\x155\x158\x169\x175\x17A\x187\x19A\x1A8\x1B1\x1B9\x1C3\x1C8\x1D0\x1D2"+
		"\x1DB\x1E5\x1E7\x1F0\x1F4\x1F7\x1FF\x202\x204\x207\x20D\x220\x227\x22E"+
		"\x234\x238\x245\x249\x250\x255\x26A\x273\x279\x27D\x284\x28A\x28E\x299"+
		"\x29E\x2A4\x2AB\x2AE\x2BA\x2C0\x2C2\x2C5\x2D1\x2D6\x2D8\x2E6\x2FD\x301"+
		"\x30D\x314\x31C\x31E\x329\x32F\x334\x33A\x33E\x347\x349\x350\x355\x359"+
		"\x35E\x365\x36B\x381\x388\x38C\x391\x395\x399\x39C\x39F\x3A7\x3B0\x3B6"+
		"\x3BA\x3BE\x3C3\x3C6\x3CB\x3CF\x3D2\x3DB\x3DF\x3E3\x3E9\x3F4\x3F8\x3FD"+
		"\x400\x404\x409\x40C\x413\x419\x427\x435\x43A\x43C\x448\x450\x457\x462"+
		"\x466\x46A\x481\x48D\x490\x497\x49F\x4A9\x4B2\x4BA\x4C2\x4CA\x4D2\x4DA"+
		"\x4E2\x4EA\x4F2\x4FA\x503\x513\x515\x520\x529\x52B\x533";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
